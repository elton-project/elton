// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fs.proto

package elton_v2

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VolumeCreateRequest struct {
	Info                 *VolumeInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *VolumeCreateRequest) Reset()         { *m = VolumeCreateRequest{} }
func (m *VolumeCreateRequest) String() string { return proto.CompactTextString(m) }
func (*VolumeCreateRequest) ProtoMessage()    {}
func (*VolumeCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{0}
}

func (m *VolumeCreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeCreateRequest.Unmarshal(m, b)
}
func (m *VolumeCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeCreateRequest.Marshal(b, m, deterministic)
}
func (m *VolumeCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeCreateRequest.Merge(m, src)
}
func (m *VolumeCreateRequest) XXX_Size() int {
	return xxx_messageInfo_VolumeCreateRequest.Size(m)
}
func (m *VolumeCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeCreateRequest proto.InternalMessageInfo

func (m *VolumeCreateRequest) GetInfo() *VolumeInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type VolumeCreateResponse struct {
	Id                   *VolumeID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *VolumeCreateResponse) Reset()         { *m = VolumeCreateResponse{} }
func (m *VolumeCreateResponse) String() string { return proto.CompactTextString(m) }
func (*VolumeCreateResponse) ProtoMessage()    {}
func (*VolumeCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{1}
}

func (m *VolumeCreateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeCreateResponse.Unmarshal(m, b)
}
func (m *VolumeCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeCreateResponse.Marshal(b, m, deterministic)
}
func (m *VolumeCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeCreateResponse.Merge(m, src)
}
func (m *VolumeCreateResponse) XXX_Size() int {
	return xxx_messageInfo_VolumeCreateResponse.Size(m)
}
func (m *VolumeCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeCreateResponse proto.InternalMessageInfo

func (m *VolumeCreateResponse) GetId() *VolumeID {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteVolumeRequest struct {
	Id                   *VolumeID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DeleteVolumeRequest) Reset()         { *m = DeleteVolumeRequest{} }
func (m *DeleteVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteVolumeRequest) ProtoMessage()    {}
func (*DeleteVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{2}
}

func (m *DeleteVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteVolumeRequest.Unmarshal(m, b)
}
func (m *DeleteVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteVolumeRequest.Marshal(b, m, deterministic)
}
func (m *DeleteVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteVolumeRequest.Merge(m, src)
}
func (m *DeleteVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteVolumeRequest.Size(m)
}
func (m *DeleteVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteVolumeRequest proto.InternalMessageInfo

func (m *DeleteVolumeRequest) GetId() *VolumeID {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteVolumeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteVolumeResponse) Reset()         { *m = DeleteVolumeResponse{} }
func (m *DeleteVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteVolumeResponse) ProtoMessage()    {}
func (*DeleteVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{3}
}

func (m *DeleteVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteVolumeResponse.Unmarshal(m, b)
}
func (m *DeleteVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteVolumeResponse.Marshal(b, m, deterministic)
}
func (m *DeleteVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteVolumeResponse.Merge(m, src)
}
func (m *DeleteVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteVolumeResponse.Size(m)
}
func (m *DeleteVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteVolumeResponse proto.InternalMessageInfo

type ListVolumeRequest struct {
	// 一回のRPCリクエストに対して返答できる最大の個数。
	// 0個の場合は、デフォルトの制限を適用。
	// 個数制限を無効化することはできない。
	Limit uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// ページネーションされたときは、前回の最後の応答についていたnextの値を設定。
	Next                 string   `protobuf:"bytes,2,opt,name=next,proto3" json:"next,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListVolumeRequest) Reset()         { *m = ListVolumeRequest{} }
func (m *ListVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*ListVolumeRequest) ProtoMessage()    {}
func (*ListVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{4}
}

func (m *ListVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListVolumeRequest.Unmarshal(m, b)
}
func (m *ListVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListVolumeRequest.Marshal(b, m, deterministic)
}
func (m *ListVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVolumeRequest.Merge(m, src)
}
func (m *ListVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_ListVolumeRequest.Size(m)
}
func (m *ListVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListVolumeRequest proto.InternalMessageInfo

func (m *ListVolumeRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListVolumeRequest) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

type ListVolumeResponse struct {
	// streamの一番最後、かつ個数制限により応答できていないアイテムが存在する場合、この値が設定される。
	// 次のVolumeService.List()のnext引数に設定すると、次のアイテムから列挙することが出来る。
	Next                 string      `protobuf:"bytes,1,opt,name=next,proto3" json:"next,omitempty"`
	Id                   *VolumeID   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Info                 *VolumeInfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListVolumeResponse) Reset()         { *m = ListVolumeResponse{} }
func (m *ListVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*ListVolumeResponse) ProtoMessage()    {}
func (*ListVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{5}
}

func (m *ListVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListVolumeResponse.Unmarshal(m, b)
}
func (m *ListVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListVolumeResponse.Marshal(b, m, deterministic)
}
func (m *ListVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVolumeResponse.Merge(m, src)
}
func (m *ListVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_ListVolumeResponse.Size(m)
}
func (m *ListVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListVolumeResponse proto.InternalMessageInfo

func (m *ListVolumeResponse) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

func (m *ListVolumeResponse) GetId() *VolumeID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ListVolumeResponse) GetInfo() *VolumeInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type InspectVolumeRequest struct {
	// keyを指定した場合、keyで検索する。
	Id *VolumeID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// nameを指定した場合、名前で検索する。
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InspectVolumeRequest) Reset()         { *m = InspectVolumeRequest{} }
func (m *InspectVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*InspectVolumeRequest) ProtoMessage()    {}
func (*InspectVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{6}
}

func (m *InspectVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InspectVolumeRequest.Unmarshal(m, b)
}
func (m *InspectVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InspectVolumeRequest.Marshal(b, m, deterministic)
}
func (m *InspectVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InspectVolumeRequest.Merge(m, src)
}
func (m *InspectVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_InspectVolumeRequest.Size(m)
}
func (m *InspectVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InspectVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InspectVolumeRequest proto.InternalMessageInfo

func (m *InspectVolumeRequest) GetId() *VolumeID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *InspectVolumeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type InspectVolumeResponse struct {
	Id                   *VolumeID   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Info                 *VolumeInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *InspectVolumeResponse) Reset()         { *m = InspectVolumeResponse{} }
func (m *InspectVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*InspectVolumeResponse) ProtoMessage()    {}
func (*InspectVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{7}
}

func (m *InspectVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InspectVolumeResponse.Unmarshal(m, b)
}
func (m *InspectVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InspectVolumeResponse.Marshal(b, m, deterministic)
}
func (m *InspectVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InspectVolumeResponse.Merge(m, src)
}
func (m *InspectVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_InspectVolumeResponse.Size(m)
}
func (m *InspectVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InspectVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InspectVolumeResponse proto.InternalMessageInfo

func (m *InspectVolumeResponse) GetId() *VolumeID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *InspectVolumeResponse) GetInfo() *VolumeInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type GetLastCommitRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLastCommitRequest) Reset()         { *m = GetLastCommitRequest{} }
func (m *GetLastCommitRequest) String() string { return proto.CompactTextString(m) }
func (*GetLastCommitRequest) ProtoMessage()    {}
func (*GetLastCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{8}
}

func (m *GetLastCommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLastCommitRequest.Unmarshal(m, b)
}
func (m *GetLastCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLastCommitRequest.Marshal(b, m, deterministic)
}
func (m *GetLastCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLastCommitRequest.Merge(m, src)
}
func (m *GetLastCommitRequest) XXX_Size() int {
	return xxx_messageInfo_GetLastCommitRequest.Size(m)
}
func (m *GetLastCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLastCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLastCommitRequest proto.InternalMessageInfo

type GetLastCommitResponse struct {
	Id                   *CommitID   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Info                 *CommitInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetLastCommitResponse) Reset()         { *m = GetLastCommitResponse{} }
func (m *GetLastCommitResponse) String() string { return proto.CompactTextString(m) }
func (*GetLastCommitResponse) ProtoMessage()    {}
func (*GetLastCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{9}
}

func (m *GetLastCommitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLastCommitResponse.Unmarshal(m, b)
}
func (m *GetLastCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLastCommitResponse.Marshal(b, m, deterministic)
}
func (m *GetLastCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLastCommitResponse.Merge(m, src)
}
func (m *GetLastCommitResponse) XXX_Size() int {
	return xxx_messageInfo_GetLastCommitResponse.Size(m)
}
func (m *GetLastCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLastCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLastCommitResponse proto.InternalMessageInfo

func (m *GetLastCommitResponse) GetId() *CommitID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *GetLastCommitResponse) GetInfo() *CommitInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type ListCommitRequest struct {
	Limit                uint64   `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Next                 string   `protobuf:"bytes,2,opt,name=next,proto3" json:"next,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCommitRequest) Reset()         { *m = ListCommitRequest{} }
func (m *ListCommitRequest) String() string { return proto.CompactTextString(m) }
func (*ListCommitRequest) ProtoMessage()    {}
func (*ListCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{10}
}

func (m *ListCommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCommitRequest.Unmarshal(m, b)
}
func (m *ListCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCommitRequest.Marshal(b, m, deterministic)
}
func (m *ListCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommitRequest.Merge(m, src)
}
func (m *ListCommitRequest) XXX_Size() int {
	return xxx_messageInfo_ListCommitRequest.Size(m)
}
func (m *ListCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommitRequest proto.InternalMessageInfo

func (m *ListCommitRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListCommitRequest) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

type ListCommitResponse struct {
	Next                 string    `protobuf:"bytes,1,opt,name=next,proto3" json:"next,omitempty"`
	Id                   *CommitID `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListCommitResponse) Reset()         { *m = ListCommitResponse{} }
func (m *ListCommitResponse) String() string { return proto.CompactTextString(m) }
func (*ListCommitResponse) ProtoMessage()    {}
func (*ListCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{11}
}

func (m *ListCommitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCommitResponse.Unmarshal(m, b)
}
func (m *ListCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCommitResponse.Marshal(b, m, deterministic)
}
func (m *ListCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommitResponse.Merge(m, src)
}
func (m *ListCommitResponse) XXX_Size() int {
	return xxx_messageInfo_ListCommitResponse.Size(m)
}
func (m *ListCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommitResponse proto.InternalMessageInfo

func (m *ListCommitResponse) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

func (m *ListCommitResponse) GetId() *CommitID {
	if m != nil {
		return m.Id
	}
	return nil
}

type CommitRequest struct {
	Base                 *CommitID `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CommitRequest) Reset()         { *m = CommitRequest{} }
func (m *CommitRequest) String() string { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()    {}
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{12}
}

func (m *CommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitRequest.Unmarshal(m, b)
}
func (m *CommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitRequest.Marshal(b, m, deterministic)
}
func (m *CommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitRequest.Merge(m, src)
}
func (m *CommitRequest) XXX_Size() int {
	return xxx_messageInfo_CommitRequest.Size(m)
}
func (m *CommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitRequest proto.InternalMessageInfo

func (m *CommitRequest) GetBase() *CommitID {
	if m != nil {
		return m.Base
	}
	return nil
}

type CommitResponse struct {
	Id                   *CommitID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CommitResponse) Reset()         { *m = CommitResponse{} }
func (m *CommitResponse) String() string { return proto.CompactTextString(m) }
func (*CommitResponse) ProtoMessage()    {}
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{13}
}

func (m *CommitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitResponse.Unmarshal(m, b)
}
func (m *CommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitResponse.Marshal(b, m, deterministic)
}
func (m *CommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitResponse.Merge(m, src)
}
func (m *CommitResponse) XXX_Size() int {
	return xxx_messageInfo_CommitResponse.Size(m)
}
func (m *CommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitResponse proto.InternalMessageInfo

func (m *CommitResponse) GetId() *CommitID {
	if m != nil {
		return m.Id
	}
	return nil
}

func init() {
	proto.RegisterType((*VolumeCreateRequest)(nil), "elton.v2.VolumeCreateRequest")
	proto.RegisterType((*VolumeCreateResponse)(nil), "elton.v2.VolumeCreateResponse")
	proto.RegisterType((*DeleteVolumeRequest)(nil), "elton.v2.DeleteVolumeRequest")
	proto.RegisterType((*DeleteVolumeResponse)(nil), "elton.v2.DeleteVolumeResponse")
	proto.RegisterType((*ListVolumeRequest)(nil), "elton.v2.ListVolumeRequest")
	proto.RegisterType((*ListVolumeResponse)(nil), "elton.v2.ListVolumeResponse")
	proto.RegisterType((*InspectVolumeRequest)(nil), "elton.v2.InspectVolumeRequest")
	proto.RegisterType((*InspectVolumeResponse)(nil), "elton.v2.InspectVolumeResponse")
	proto.RegisterType((*GetLastCommitRequest)(nil), "elton.v2.GetLastCommitRequest")
	proto.RegisterType((*GetLastCommitResponse)(nil), "elton.v2.GetLastCommitResponse")
	proto.RegisterType((*ListCommitRequest)(nil), "elton.v2.ListCommitRequest")
	proto.RegisterType((*ListCommitResponse)(nil), "elton.v2.ListCommitResponse")
	proto.RegisterType((*CommitRequest)(nil), "elton.v2.CommitRequest")
	proto.RegisterType((*CommitResponse)(nil), "elton.v2.CommitResponse")
}

func init() { proto.RegisterFile("fs.proto", fileDescriptor_e604833c2b457e38) }

var fileDescriptor_e604833c2b457e38 = []byte{
	// 453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x5d, 0xab, 0xd3, 0x40,
	0x10, 0x25, 0x31, 0xc6, 0xeb, 0x5c, 0x2a, 0xb8, 0x37, 0x5e, 0x4b, 0xbc, 0x7e, 0xb0, 0x0f, 0xd2,
	0xa7, 0x20, 0x51, 0x10, 0x15, 0xf1, 0xa1, 0x85, 0x52, 0x29, 0x22, 0x11, 0x7c, 0x4f, 0xdb, 0x29,
	0x2c, 0x24, 0xd9, 0xd8, 0xdd, 0x16, 0xfd, 0x5b, 0xfe, 0x25, 0xff, 0x88, 0x74, 0x77, 0xd3, 0x66,
	0xd3, 0xf4, 0x23, 0x6f, 0xed, 0xce, 0xcc, 0x39, 0x67, 0xe6, 0xcc, 0x04, 0xae, 0x96, 0x22, 0x2a,
	0x57, 0x5c, 0x72, 0x72, 0x85, 0x99, 0xe4, 0x45, 0xb4, 0x89, 0xc3, 0x6b, 0xf9, 0xa7, 0x44, 0xf3,
	0x4c, 0xbf, 0xc0, 0xcd, 0x4f, 0x9e, 0xad, 0x73, 0x1c, 0xae, 0x30, 0x95, 0x98, 0xe0, 0xaf, 0x35,
	0x0a, 0x49, 0x06, 0xe0, 0xb1, 0x62, 0xc9, 0xfb, 0xee, 0x2b, 0x67, 0x70, 0x1d, 0x07, 0x51, 0x55,
	0x1c, 0xe9, 0xe4, 0x49, 0xb1, 0xe4, 0x89, 0xca, 0xa0, 0x1f, 0x21, 0xb0, 0x01, 0x44, 0xc9, 0x0b,
	0x81, 0x84, 0x82, 0xcb, 0x16, 0x7d, 0x47, 0xd5, 0x93, 0x83, 0xfa, 0x51, 0xe2, 0xb2, 0x05, 0xfd,
	0x00, 0x37, 0x23, 0xcc, 0x50, 0xa2, 0x7e, 0xad, 0xc8, 0x2f, 0x29, 0xbd, 0x85, 0xc0, 0x2e, 0xd5,
	0xb4, 0xf4, 0x33, 0x3c, 0x9e, 0x32, 0x21, 0x6d, 0xc0, 0x00, 0xee, 0x67, 0x2c, 0x67, 0x52, 0x61,
	0x7a, 0x89, 0xfe, 0x43, 0x08, 0x78, 0x05, 0xfe, 0x96, 0xaa, 0xc7, 0x87, 0x89, 0xfa, 0x4d, 0x37,
	0x40, 0xea, 0xe5, 0xa6, 0x97, 0x2a, 0xd3, 0xd9, 0x67, 0x1a, 0x91, 0xee, 0x29, 0x91, 0xbb, 0x29,
	0xde, 0x3b, 0x3b, 0xc5, 0x6f, 0x10, 0x4c, 0x0a, 0x51, 0xe2, 0x5c, 0x76, 0x1e, 0x85, 0x52, 0x97,
	0xe6, 0xb8, 0xeb, 0x23, 0xcd, 0x91, 0x22, 0x3c, 0x69, 0xe0, 0x5d, 0x6e, 0x4b, 0x07, 0xf3, 0x6f,
	0x21, 0x18, 0xa3, 0x9c, 0xa6, 0x42, 0x0e, 0x79, 0x9e, 0x33, 0x69, 0x64, 0x6f, 0xe9, 0x1b, 0xef,
	0xa7, 0xe9, 0x75, 0xd6, 0x39, 0x7a, 0x93, 0xb5, 0xa7, 0x37, 0x66, 0x5b, 0xdc, 0x1d, 0xcc, 0x9e,
	0x6a, 0xb3, 0x1b, 0x12, 0x3b, 0x98, 0x5d, 0x97, 0x4d, 0xdf, 0x43, 0xcf, 0x16, 0xf2, 0x1a, 0xbc,
	0x59, 0x2a, 0xf0, 0x44, 0xb7, 0x2a, 0x4e, 0xdf, 0xc1, 0xa3, 0xee, 0x53, 0x8a, 0xff, 0xba, 0xd0,
	0xd3, 0x7e, 0xfc, 0xc0, 0xd5, 0x86, 0xcd, 0x91, 0x8c, 0xc1, 0xd7, 0x37, 0x48, 0x9e, 0x37, 0x2d,
	0xb3, 0x8e, 0x3b, 0x7c, 0x71, 0x2c, 0x6c, 0xe8, 0xc7, 0xe0, 0xeb, 0xdb, 0xaa, 0x03, 0xb5, 0x1c,
	0x6a, 0x1d, 0xa8, 0xed, 0x18, 0xc9, 0x10, 0xbc, 0xed, 0x80, 0xc9, 0xb3, 0x7d, 0xde, 0xc1, 0x71,
	0x86, 0x77, 0xed, 0x41, 0x0d, 0xf1, 0xc6, 0x21, 0x5f, 0xe1, 0x81, 0x59, 0x65, 0x52, 0xe3, 0x6b,
	0xbb, 0x96, 0xf0, 0xe5, 0xd1, 0xb8, 0x46, 0x8b, 0xff, 0x39, 0x95, 0x49, 0xd5, 0xd0, 0xbe, 0x43,
	0xcf, 0xda, 0xd4, 0x3a, 0x47, 0xdb, 0x6a, 0xd7, 0x39, 0xda, 0x57, 0xfc, 0x48, 0xd3, 0x36, 0xca,
	0x5d, 0x7b, 0x70, 0xd7, 0xf4, 0x27, 0xf0, 0x8d, 0x9e, 0xa7, 0x4d, 0xff, 0x2b, 0x88, 0xfe, 0x61,
	0x40, 0x97, 0xcf, 0x7c, 0xf5, 0x69, 0x7f, 0xfb, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x7b, 0x0a, 0x06,
	0x63, 0xfd, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VolumeServiceClient is the client API for VolumeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VolumeServiceClient interface {
	Create(ctx context.Context, in *VolumeCreateRequest, opts ...grpc.CallOption) (*VolumeCreateResponse, error)
	Delete(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*DeleteVolumeResponse, error)
	List(ctx context.Context, in *ListVolumeRequest, opts ...grpc.CallOption) (VolumeService_ListClient, error)
	Inspect(ctx context.Context, in *InspectVolumeRequest, opts ...grpc.CallOption) (*InspectVolumeResponse, error)
}

type volumeServiceClient struct {
	cc *grpc.ClientConn
}

func NewVolumeServiceClient(cc *grpc.ClientConn) VolumeServiceClient {
	return &volumeServiceClient{cc}
}

func (c *volumeServiceClient) Create(ctx context.Context, in *VolumeCreateRequest, opts ...grpc.CallOption) (*VolumeCreateResponse, error) {
	out := new(VolumeCreateResponse)
	err := c.cc.Invoke(ctx, "/elton.v2.VolumeService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) Delete(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*DeleteVolumeResponse, error) {
	out := new(DeleteVolumeResponse)
	err := c.cc.Invoke(ctx, "/elton.v2.VolumeService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) List(ctx context.Context, in *ListVolumeRequest, opts ...grpc.CallOption) (VolumeService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VolumeService_serviceDesc.Streams[0], "/elton.v2.VolumeService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &volumeServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VolumeService_ListClient interface {
	Recv() (*ListVolumeResponse, error)
	grpc.ClientStream
}

type volumeServiceListClient struct {
	grpc.ClientStream
}

func (x *volumeServiceListClient) Recv() (*ListVolumeResponse, error) {
	m := new(ListVolumeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *volumeServiceClient) Inspect(ctx context.Context, in *InspectVolumeRequest, opts ...grpc.CallOption) (*InspectVolumeResponse, error) {
	out := new(InspectVolumeResponse)
	err := c.cc.Invoke(ctx, "/elton.v2.VolumeService/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VolumeServiceServer is the server API for VolumeService service.
type VolumeServiceServer interface {
	Create(context.Context, *VolumeCreateRequest) (*VolumeCreateResponse, error)
	Delete(context.Context, *DeleteVolumeRequest) (*DeleteVolumeResponse, error)
	List(*ListVolumeRequest, VolumeService_ListServer) error
	Inspect(context.Context, *InspectVolumeRequest) (*InspectVolumeResponse, error)
}

// UnimplementedVolumeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVolumeServiceServer struct {
}

func (*UnimplementedVolumeServiceServer) Create(ctx context.Context, req *VolumeCreateRequest) (*VolumeCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedVolumeServiceServer) Delete(ctx context.Context, req *DeleteVolumeRequest) (*DeleteVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedVolumeServiceServer) List(req *ListVolumeRequest, srv VolumeService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedVolumeServiceServer) Inspect(ctx context.Context, req *InspectVolumeRequest) (*InspectVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}

func RegisterVolumeServiceServer(s *grpc.Server, srv VolumeServiceServer) {
	s.RegisterService(&_VolumeService_serviceDesc, srv)
}

func _VolumeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elton.v2.VolumeService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).Create(ctx, req.(*VolumeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elton.v2.VolumeService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).Delete(ctx, req.(*DeleteVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListVolumeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VolumeServiceServer).List(m, &volumeServiceListServer{stream})
}

type VolumeService_ListServer interface {
	Send(*ListVolumeResponse) error
	grpc.ServerStream
}

type volumeServiceListServer struct {
	grpc.ServerStream
}

func (x *volumeServiceListServer) Send(m *ListVolumeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VolumeService_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elton.v2.VolumeService/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).Inspect(ctx, req.(*InspectVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VolumeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elton.v2.VolumeService",
	HandlerType: (*VolumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _VolumeService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _VolumeService_Delete_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _VolumeService_Inspect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _VolumeService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fs.proto",
}

// CommitServiceClient is the client API for CommitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommitServiceClient interface {
	GetLastCommit(ctx context.Context, in *GetLastCommitRequest, opts ...grpc.CallOption) (*GetLastCommitResponse, error)
	List(ctx context.Context, in *ListCommitRequest, opts ...grpc.CallOption) (CommitService_ListClient, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
}

type commitServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommitServiceClient(cc *grpc.ClientConn) CommitServiceClient {
	return &commitServiceClient{cc}
}

func (c *commitServiceClient) GetLastCommit(ctx context.Context, in *GetLastCommitRequest, opts ...grpc.CallOption) (*GetLastCommitResponse, error) {
	out := new(GetLastCommitResponse)
	err := c.cc.Invoke(ctx, "/elton.v2.CommitService/GetLastCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitServiceClient) List(ctx context.Context, in *ListCommitRequest, opts ...grpc.CallOption) (CommitService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CommitService_serviceDesc.Streams[0], "/elton.v2.CommitService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &commitServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommitService_ListClient interface {
	Recv() (*ListCommitResponse, error)
	grpc.ClientStream
}

type commitServiceListClient struct {
	grpc.ClientStream
}

func (x *commitServiceListClient) Recv() (*ListCommitResponse, error) {
	m := new(ListCommitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commitServiceClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, "/elton.v2.CommitService/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitServiceServer is the server API for CommitService service.
type CommitServiceServer interface {
	GetLastCommit(context.Context, *GetLastCommitRequest) (*GetLastCommitResponse, error)
	List(*ListCommitRequest, CommitService_ListServer) error
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
}

// UnimplementedCommitServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCommitServiceServer struct {
}

func (*UnimplementedCommitServiceServer) GetLastCommit(ctx context.Context, req *GetLastCommitRequest) (*GetLastCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastCommit not implemented")
}
func (*UnimplementedCommitServiceServer) List(req *ListCommitRequest, srv CommitService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedCommitServiceServer) Commit(ctx context.Context, req *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}

func RegisterCommitServiceServer(s *grpc.Server, srv CommitServiceServer) {
	s.RegisterService(&_CommitService_serviceDesc, srv)
}

func _CommitService_GetLastCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServiceServer).GetLastCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elton.v2.CommitService/GetLastCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServiceServer).GetLastCommit(ctx, req.(*GetLastCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCommitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommitServiceServer).List(m, &commitServiceListServer{stream})
}

type CommitService_ListServer interface {
	Send(*ListCommitResponse) error
	grpc.ServerStream
}

type commitServiceListServer struct {
	grpc.ServerStream
}

func (x *commitServiceListServer) Send(m *ListCommitResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CommitService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elton.v2.CommitService/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServiceServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommitService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elton.v2.CommitService",
	HandlerType: (*CommitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLastCommit",
			Handler:    _CommitService_GetLastCommit_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _CommitService_Commit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _CommitService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fs.proto",
}
