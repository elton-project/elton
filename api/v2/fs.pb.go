// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fs.proto

package elton_v2

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateVolumeRequest struct {
	Info                 *VolumeInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateVolumeRequest) Reset()         { *m = CreateVolumeRequest{} }
func (m *CreateVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*CreateVolumeRequest) ProtoMessage()    {}
func (*CreateVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{0}
}

func (m *CreateVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateVolumeRequest.Unmarshal(m, b)
}
func (m *CreateVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateVolumeRequest.Marshal(b, m, deterministic)
}
func (m *CreateVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVolumeRequest.Merge(m, src)
}
func (m *CreateVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_CreateVolumeRequest.Size(m)
}
func (m *CreateVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVolumeRequest proto.InternalMessageInfo

func (m *CreateVolumeRequest) GetInfo() *VolumeInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type CreateVolumeResponse struct {
	Id                   *VolumeID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CreateVolumeResponse) Reset()         { *m = CreateVolumeResponse{} }
func (m *CreateVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*CreateVolumeResponse) ProtoMessage()    {}
func (*CreateVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{1}
}

func (m *CreateVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateVolumeResponse.Unmarshal(m, b)
}
func (m *CreateVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateVolumeResponse.Marshal(b, m, deterministic)
}
func (m *CreateVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVolumeResponse.Merge(m, src)
}
func (m *CreateVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_CreateVolumeResponse.Size(m)
}
func (m *CreateVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVolumeResponse proto.InternalMessageInfo

func (m *CreateVolumeResponse) GetId() *VolumeID {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteVolumeRequest struct {
	Id                   *VolumeID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DeleteVolumeRequest) Reset()         { *m = DeleteVolumeRequest{} }
func (m *DeleteVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteVolumeRequest) ProtoMessage()    {}
func (*DeleteVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{2}
}

func (m *DeleteVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteVolumeRequest.Unmarshal(m, b)
}
func (m *DeleteVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteVolumeRequest.Marshal(b, m, deterministic)
}
func (m *DeleteVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteVolumeRequest.Merge(m, src)
}
func (m *DeleteVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteVolumeRequest.Size(m)
}
func (m *DeleteVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteVolumeRequest proto.InternalMessageInfo

func (m *DeleteVolumeRequest) GetId() *VolumeID {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteVolumeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteVolumeResponse) Reset()         { *m = DeleteVolumeResponse{} }
func (m *DeleteVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteVolumeResponse) ProtoMessage()    {}
func (*DeleteVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{3}
}

func (m *DeleteVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteVolumeResponse.Unmarshal(m, b)
}
func (m *DeleteVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteVolumeResponse.Marshal(b, m, deterministic)
}
func (m *DeleteVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteVolumeResponse.Merge(m, src)
}
func (m *DeleteVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteVolumeResponse.Size(m)
}
func (m *DeleteVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteVolumeResponse proto.InternalMessageInfo

type ListVolumesRequest struct {
	// 一回のRPCリクエストに対して返答できる最大の個数。
	// 0個の場合は、デフォルトの制限を適用。
	// 個数制限を無効化することはできない。
	Limit uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// ページネーションされたときは、前回の最後の応答についていたnextの値を設定。
	Next                 string   `protobuf:"bytes,2,opt,name=next,proto3" json:"next,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListVolumesRequest) Reset()         { *m = ListVolumesRequest{} }
func (m *ListVolumesRequest) String() string { return proto.CompactTextString(m) }
func (*ListVolumesRequest) ProtoMessage()    {}
func (*ListVolumesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{4}
}

func (m *ListVolumesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListVolumesRequest.Unmarshal(m, b)
}
func (m *ListVolumesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListVolumesRequest.Marshal(b, m, deterministic)
}
func (m *ListVolumesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVolumesRequest.Merge(m, src)
}
func (m *ListVolumesRequest) XXX_Size() int {
	return xxx_messageInfo_ListVolumesRequest.Size(m)
}
func (m *ListVolumesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVolumesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListVolumesRequest proto.InternalMessageInfo

func (m *ListVolumesRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListVolumesRequest) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

type ListVolumesResponse struct {
	// streamの一番最後、かつ個数制限により応答できていないアイテムが存在する場合、この値が設定される。
	// 次のVolumeService.List()のnext引数に設定すると、次のアイテムから列挙することが出来る。
	Next                 string      `protobuf:"bytes,1,opt,name=next,proto3" json:"next,omitempty"`
	Id                   *VolumeID   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Info                 *VolumeInfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListVolumesResponse) Reset()         { *m = ListVolumesResponse{} }
func (m *ListVolumesResponse) String() string { return proto.CompactTextString(m) }
func (*ListVolumesResponse) ProtoMessage()    {}
func (*ListVolumesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{5}
}

func (m *ListVolumesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListVolumesResponse.Unmarshal(m, b)
}
func (m *ListVolumesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListVolumesResponse.Marshal(b, m, deterministic)
}
func (m *ListVolumesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVolumesResponse.Merge(m, src)
}
func (m *ListVolumesResponse) XXX_Size() int {
	return xxx_messageInfo_ListVolumesResponse.Size(m)
}
func (m *ListVolumesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVolumesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListVolumesResponse proto.InternalMessageInfo

func (m *ListVolumesResponse) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

func (m *ListVolumesResponse) GetId() *VolumeID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ListVolumesResponse) GetInfo() *VolumeInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type InspectVolumeRequest struct {
	// keyを指定した場合、keyで検索する。
	Id *VolumeID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// nameを指定した場合、名前で検索する。
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InspectVolumeRequest) Reset()         { *m = InspectVolumeRequest{} }
func (m *InspectVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*InspectVolumeRequest) ProtoMessage()    {}
func (*InspectVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{6}
}

func (m *InspectVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InspectVolumeRequest.Unmarshal(m, b)
}
func (m *InspectVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InspectVolumeRequest.Marshal(b, m, deterministic)
}
func (m *InspectVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InspectVolumeRequest.Merge(m, src)
}
func (m *InspectVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_InspectVolumeRequest.Size(m)
}
func (m *InspectVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InspectVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InspectVolumeRequest proto.InternalMessageInfo

func (m *InspectVolumeRequest) GetId() *VolumeID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *InspectVolumeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type InspectVolumeResponse struct {
	Id                   *VolumeID   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Info                 *VolumeInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *InspectVolumeResponse) Reset()         { *m = InspectVolumeResponse{} }
func (m *InspectVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*InspectVolumeResponse) ProtoMessage()    {}
func (*InspectVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{7}
}

func (m *InspectVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InspectVolumeResponse.Unmarshal(m, b)
}
func (m *InspectVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InspectVolumeResponse.Marshal(b, m, deterministic)
}
func (m *InspectVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InspectVolumeResponse.Merge(m, src)
}
func (m *InspectVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_InspectVolumeResponse.Size(m)
}
func (m *InspectVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InspectVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InspectVolumeResponse proto.InternalMessageInfo

func (m *InspectVolumeResponse) GetId() *VolumeID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *InspectVolumeResponse) GetInfo() *VolumeInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type GetLastCommitRequest struct {
	VolumeId             *VolumeID `protobuf:"bytes,1,opt,name=volumeId,proto3" json:"volumeId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetLastCommitRequest) Reset()         { *m = GetLastCommitRequest{} }
func (m *GetLastCommitRequest) String() string { return proto.CompactTextString(m) }
func (*GetLastCommitRequest) ProtoMessage()    {}
func (*GetLastCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{8}
}

func (m *GetLastCommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLastCommitRequest.Unmarshal(m, b)
}
func (m *GetLastCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLastCommitRequest.Marshal(b, m, deterministic)
}
func (m *GetLastCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLastCommitRequest.Merge(m, src)
}
func (m *GetLastCommitRequest) XXX_Size() int {
	return xxx_messageInfo_GetLastCommitRequest.Size(m)
}
func (m *GetLastCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLastCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLastCommitRequest proto.InternalMessageInfo

func (m *GetLastCommitRequest) GetVolumeId() *VolumeID {
	if m != nil {
		return m.VolumeId
	}
	return nil
}

type GetLastCommitResponse struct {
	Id                   *CommitID   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Info                 *CommitInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetLastCommitResponse) Reset()         { *m = GetLastCommitResponse{} }
func (m *GetLastCommitResponse) String() string { return proto.CompactTextString(m) }
func (*GetLastCommitResponse) ProtoMessage()    {}
func (*GetLastCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{9}
}

func (m *GetLastCommitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLastCommitResponse.Unmarshal(m, b)
}
func (m *GetLastCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLastCommitResponse.Marshal(b, m, deterministic)
}
func (m *GetLastCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLastCommitResponse.Merge(m, src)
}
func (m *GetLastCommitResponse) XXX_Size() int {
	return xxx_messageInfo_GetLastCommitResponse.Size(m)
}
func (m *GetLastCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLastCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLastCommitResponse proto.InternalMessageInfo

func (m *GetLastCommitResponse) GetId() *CommitID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *GetLastCommitResponse) GetInfo() *CommitInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type ListCommitsRequest struct {
	// 一回のRPCリクエストに対して返答できる最大の個数。
	// 0個の場合は、デフォルトの制限を適用。
	// 個数制限を無効化することはできない。
	Limit uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// ページネーションされたときは、前回の最後の応答についていたnextの値を設定。
	Next                 string   `protobuf:"bytes,2,opt,name=next,proto3" json:"next,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCommitsRequest) Reset()         { *m = ListCommitsRequest{} }
func (m *ListCommitsRequest) String() string { return proto.CompactTextString(m) }
func (*ListCommitsRequest) ProtoMessage()    {}
func (*ListCommitsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{10}
}

func (m *ListCommitsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCommitsRequest.Unmarshal(m, b)
}
func (m *ListCommitsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCommitsRequest.Marshal(b, m, deterministic)
}
func (m *ListCommitsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommitsRequest.Merge(m, src)
}
func (m *ListCommitsRequest) XXX_Size() int {
	return xxx_messageInfo_ListCommitsRequest.Size(m)
}
func (m *ListCommitsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommitsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommitsRequest proto.InternalMessageInfo

func (m *ListCommitsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListCommitsRequest) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

type ListCommitsResponse struct {
	// streamの一番最後、かつ個数制限により応答できていないアイテムが存在する場合、この値が設定される。
	// 次のCommitService.List()のnext引数に設定すると、次のアイテムから列挙することが出来る。
	Next                 string    `protobuf:"bytes,1,opt,name=next,proto3" json:"next,omitempty"`
	Id                   *CommitID `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListCommitsResponse) Reset()         { *m = ListCommitsResponse{} }
func (m *ListCommitsResponse) String() string { return proto.CompactTextString(m) }
func (*ListCommitsResponse) ProtoMessage()    {}
func (*ListCommitsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{11}
}

func (m *ListCommitsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCommitsResponse.Unmarshal(m, b)
}
func (m *ListCommitsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCommitsResponse.Marshal(b, m, deterministic)
}
func (m *ListCommitsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommitsResponse.Merge(m, src)
}
func (m *ListCommitsResponse) XXX_Size() int {
	return xxx_messageInfo_ListCommitsResponse.Size(m)
}
func (m *ListCommitsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommitsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommitsResponse proto.InternalMessageInfo

func (m *ListCommitsResponse) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

func (m *ListCommitsResponse) GetId() *CommitID {
	if m != nil {
		return m.Id
	}
	return nil
}

type CommitRequest struct {
	LeftParentID         *CommitID   `protobuf:"bytes,1,opt,name=leftParentID,proto3" json:"leftParentID,omitempty"`
	RightParentID        *CommitID   `protobuf:"bytes,2,opt,name=rightParentID,proto3" json:"rightParentID,omitempty"`
	Info                 *CommitInfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Tree                 *Tree       `protobuf:"bytes,4,opt,name=tree,proto3" json:"tree,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CommitRequest) Reset()         { *m = CommitRequest{} }
func (m *CommitRequest) String() string { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()    {}
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{12}
}

func (m *CommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitRequest.Unmarshal(m, b)
}
func (m *CommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitRequest.Marshal(b, m, deterministic)
}
func (m *CommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitRequest.Merge(m, src)
}
func (m *CommitRequest) XXX_Size() int {
	return xxx_messageInfo_CommitRequest.Size(m)
}
func (m *CommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitRequest proto.InternalMessageInfo

func (m *CommitRequest) GetLeftParentID() *CommitID {
	if m != nil {
		return m.LeftParentID
	}
	return nil
}

func (m *CommitRequest) GetRightParentID() *CommitID {
	if m != nil {
		return m.RightParentID
	}
	return nil
}

func (m *CommitRequest) GetInfo() *CommitInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *CommitRequest) GetTree() *Tree {
	if m != nil {
		return m.Tree
	}
	return nil
}

type CommitResponse struct {
	Id                   *CommitID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CommitResponse) Reset()         { *m = CommitResponse{} }
func (m *CommitResponse) String() string { return proto.CompactTextString(m) }
func (*CommitResponse) ProtoMessage()    {}
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e604833c2b457e38, []int{13}
}

func (m *CommitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitResponse.Unmarshal(m, b)
}
func (m *CommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitResponse.Marshal(b, m, deterministic)
}
func (m *CommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitResponse.Merge(m, src)
}
func (m *CommitResponse) XXX_Size() int {
	return xxx_messageInfo_CommitResponse.Size(m)
}
func (m *CommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitResponse proto.InternalMessageInfo

func (m *CommitResponse) GetId() *CommitID {
	if m != nil {
		return m.Id
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateVolumeRequest)(nil), "elton.v2.CreateVolumeRequest")
	proto.RegisterType((*CreateVolumeResponse)(nil), "elton.v2.CreateVolumeResponse")
	proto.RegisterType((*DeleteVolumeRequest)(nil), "elton.v2.DeleteVolumeRequest")
	proto.RegisterType((*DeleteVolumeResponse)(nil), "elton.v2.DeleteVolumeResponse")
	proto.RegisterType((*ListVolumesRequest)(nil), "elton.v2.ListVolumesRequest")
	proto.RegisterType((*ListVolumesResponse)(nil), "elton.v2.ListVolumesResponse")
	proto.RegisterType((*InspectVolumeRequest)(nil), "elton.v2.InspectVolumeRequest")
	proto.RegisterType((*InspectVolumeResponse)(nil), "elton.v2.InspectVolumeResponse")
	proto.RegisterType((*GetLastCommitRequest)(nil), "elton.v2.GetLastCommitRequest")
	proto.RegisterType((*GetLastCommitResponse)(nil), "elton.v2.GetLastCommitResponse")
	proto.RegisterType((*ListCommitsRequest)(nil), "elton.v2.ListCommitsRequest")
	proto.RegisterType((*ListCommitsResponse)(nil), "elton.v2.ListCommitsResponse")
	proto.RegisterType((*CommitRequest)(nil), "elton.v2.CommitRequest")
	proto.RegisterType((*CommitResponse)(nil), "elton.v2.CommitResponse")
}

func init() { proto.RegisterFile("fs.proto", fileDescriptor_e604833c2b457e38) }

var fileDescriptor_e604833c2b457e38 = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x4d, 0x8f, 0xd3, 0x30,
	0x10, 0x55, 0x42, 0x58, 0x95, 0x69, 0xb3, 0x07, 0x37, 0x40, 0x55, 0xb1, 0x80, 0x7c, 0xda, 0x53,
	0xb4, 0x2a, 0x08, 0xf1, 0x21, 0xc1, 0x61, 0x2b, 0x50, 0xa5, 0x16, 0x55, 0x01, 0x71, 0x0f, 0xbb,
	0x53, 0xb0, 0x94, 0x8f, 0x92, 0x78, 0x0b, 0xfc, 0x48, 0xc4, 0x1f, 0xe1, 0x47, 0x20, 0x6c, 0x27,
	0xb1, 0xdd, 0xa4, 0xbb, 0xe1, 0xd6, 0x7a, 0xde, 0x7b, 0xf3, 0x3c, 0x9e, 0x99, 0xc0, 0x60, 0x53,
	0x86, 0xdb, 0x22, 0xe7, 0x39, 0x19, 0x60, 0xc2, 0xf3, 0x2c, 0xdc, 0xcd, 0xa6, 0x43, 0xfe, 0x73,
	0x8b, 0xea, 0x98, 0xbe, 0x81, 0xf1, 0x79, 0x81, 0x31, 0xc7, 0x4f, 0x79, 0x72, 0x95, 0x62, 0x84,
	0xdf, 0xae, 0xb0, 0xe4, 0xe4, 0x14, 0x3c, 0x96, 0x6d, 0xf2, 0x89, 0xfb, 0xd8, 0x39, 0x1d, 0xce,
	0x82, 0xb0, 0x22, 0x87, 0x12, 0xb6, 0xc8, 0x36, 0x79, 0x24, 0x10, 0xf4, 0x25, 0x04, 0xa6, 0x40,
	0xb9, 0xcd, 0xb3, 0x12, 0x09, 0x05, 0x97, 0x5d, 0x4e, 0x1c, 0xc1, 0x27, 0x7b, 0xfc, 0x79, 0xe4,
	0xb2, 0x4b, 0xfa, 0x02, 0xc6, 0x73, 0x4c, 0xd0, 0x4e, 0x7e, 0x13, 0xea, 0x3d, 0x08, 0x4c, 0xaa,
	0x4c, 0x4b, 0x5f, 0x03, 0x59, 0xb2, 0x92, 0xcb, 0xd3, 0xb2, 0x52, 0x0c, 0xe0, 0x76, 0xc2, 0x52,
	0xc6, 0x85, 0xa8, 0x17, 0xc9, 0x3f, 0x84, 0x80, 0x97, 0xe1, 0x0f, 0x2e, 0x2e, 0x79, 0x27, 0x12,
	0xbf, 0xe9, 0x77, 0x18, 0x1b, 0x7c, 0x75, 0x9b, 0x0a, 0xea, 0x34, 0x50, 0x65, 0xd3, 0x3d, 0x64,
	0xb3, 0xae, 0xe3, 0xad, 0x6b, 0xeb, 0xf8, 0x1e, 0x82, 0x45, 0x56, 0x6e, 0xf1, 0x82, 0xf7, 0x2e,
	0x86, 0x70, 0x17, 0xa7, 0x58, 0x5f, 0x24, 0x4e, 0x91, 0x22, 0xdc, 0xb5, 0xf4, 0x6e, 0xfe, 0x30,
	0x3d, 0x9e, 0xff, 0x2d, 0x04, 0xef, 0x90, 0x2f, 0xe3, 0x92, 0x9f, 0xe7, 0x69, 0xca, 0x78, 0x65,
	0x3b, 0x84, 0xc1, 0x4e, 0x62, 0x0f, 0xe5, 0xaa, 0x31, 0xff, 0xec, 0x5a, 0x3a, 0x87, 0xed, 0x4a,
	0xd4, 0x75, 0x76, 0x15, 0xaa, 0xb1, 0xab, 0xda, 0x43, 0x9e, 0xff, 0x47, 0x7b, 0xac, 0x64, 0x7b,
	0xd4, 0xfc, 0xfe, 0xed, 0xa1, 0x1b, 0xa7, 0xbf, 0x1d, 0xf0, 0xcd, 0xba, 0x3d, 0x83, 0x51, 0x82,
	0x1b, 0xbe, 0x8e, 0x0b, 0xcc, 0xf8, 0x62, 0x7e, 0xe0, 0xe2, 0x06, 0x8e, 0x3c, 0x07, 0xbf, 0x60,
	0x5f, 0xbe, 0x36, 0xc4, 0xee, 0xc4, 0x26, 0xb0, 0xbb, 0x45, 0xed, 0xe2, 0x11, 0x0a, 0x1e, 0x2f,
	0x10, 0x27, 0x9e, 0x40, 0x1e, 0x37, 0xc8, 0x8f, 0x05, 0x62, 0x24, 0x62, 0xf4, 0x29, 0x1c, 0xf7,
	0x7f, 0xc0, 0xd9, 0x2f, 0x17, 0x7c, 0xd9, 0x14, 0x1f, 0xb0, 0xd8, 0xb1, 0x0b, 0x24, 0x2b, 0x18,
	0xe9, 0x6b, 0x85, 0x9c, 0x68, 0xcc, 0xfd, 0x7d, 0x35, 0x7d, 0xd8, 0x15, 0x56, 0x26, 0x56, 0x30,
	0xd2, 0xd7, 0x85, 0x2e, 0xd7, 0xb2, 0x81, 0x74, 0xb9, 0xb6, 0x2d, 0x43, 0x96, 0x30, 0xd4, 0xb6,
	0x04, 0x79, 0xd0, 0xc0, 0xf7, 0x97, 0xcf, 0xf4, 0xa4, 0x23, 0x2a, 0xb5, 0xce, 0x1c, 0xb2, 0x06,
	0xdf, 0x18, 0x55, 0xa2, 0xa5, 0x6f, 0xdb, 0x09, 0xd3, 0x47, 0x9d, 0x71, 0xa9, 0x39, 0xfb, 0x53,
	0xf7, 0x55, 0x55, 0xcf, 0x35, 0xf8, 0xc6, 0x7c, 0xe9, 0x39, 0xda, 0x06, 0x58, 0xcf, 0xd1, 0x3e,
	0x98, 0xaa, 0x06, 0x6a, 0x14, 0xec, 0x1a, 0x98, 0x13, 0x66, 0xd7, 0xc0, 0x9a, 0x9f, 0x33, 0x87,
	0xbc, 0x82, 0x23, 0x65, 0xec, 0xbe, 0xdd, 0x23, 0x95, 0xc6, 0x64, 0x3f, 0x20, 0xe9, 0x9f, 0x8f,
	0xc4, 0xb7, 0xec, 0xc9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xf3, 0xd4, 0xa6, 0xee, 0x06,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VolumeServiceClient is the client API for VolumeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VolumeServiceClient interface {
	// 新しいvolumeを作成する。
	// volumeのメタデータは作成時に設定する。現時点では、作成時に設定したメタ―データの更新はできないが、今後のアップデートでメタデータ更新APIを
	// 作成するかもしれない。
	CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*CreateVolumeResponse, error)
	// 指定したvolumeを削除する。
	DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*DeleteVolumeResponse, error)
	// 現在ある全てのvolumeを列挙する。
	// 一回のレスポンスで返す個数指定と、ページネーションの設定が行える。
	// 詳細な使い方は、引数とレスポンスのデータ型のコメントを参照。
	ListVolumes(ctx context.Context, in *ListVolumesRequest, opts ...grpc.CallOption) (VolumeService_ListVolumesClient, error)
	// 指定したvolumeのメタデータを取得する。
	InspectVolume(ctx context.Context, in *InspectVolumeRequest, opts ...grpc.CallOption) (*InspectVolumeResponse, error)
}

type volumeServiceClient struct {
	cc *grpc.ClientConn
}

func NewVolumeServiceClient(cc *grpc.ClientConn) VolumeServiceClient {
	return &volumeServiceClient{cc}
}

func (c *volumeServiceClient) CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*CreateVolumeResponse, error) {
	out := new(CreateVolumeResponse)
	err := c.cc.Invoke(ctx, "/elton.v2.VolumeService/CreateVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*DeleteVolumeResponse, error) {
	out := new(DeleteVolumeResponse)
	err := c.cc.Invoke(ctx, "/elton.v2.VolumeService/DeleteVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) ListVolumes(ctx context.Context, in *ListVolumesRequest, opts ...grpc.CallOption) (VolumeService_ListVolumesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VolumeService_serviceDesc.Streams[0], "/elton.v2.VolumeService/ListVolumes", opts...)
	if err != nil {
		return nil, err
	}
	x := &volumeServiceListVolumesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VolumeService_ListVolumesClient interface {
	Recv() (*ListVolumesResponse, error)
	grpc.ClientStream
}

type volumeServiceListVolumesClient struct {
	grpc.ClientStream
}

func (x *volumeServiceListVolumesClient) Recv() (*ListVolumesResponse, error) {
	m := new(ListVolumesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *volumeServiceClient) InspectVolume(ctx context.Context, in *InspectVolumeRequest, opts ...grpc.CallOption) (*InspectVolumeResponse, error) {
	out := new(InspectVolumeResponse)
	err := c.cc.Invoke(ctx, "/elton.v2.VolumeService/InspectVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VolumeServiceServer is the server API for VolumeService service.
type VolumeServiceServer interface {
	// 新しいvolumeを作成する。
	// volumeのメタデータは作成時に設定する。現時点では、作成時に設定したメタ―データの更新はできないが、今後のアップデートでメタデータ更新APIを
	// 作成するかもしれない。
	CreateVolume(context.Context, *CreateVolumeRequest) (*CreateVolumeResponse, error)
	// 指定したvolumeを削除する。
	DeleteVolume(context.Context, *DeleteVolumeRequest) (*DeleteVolumeResponse, error)
	// 現在ある全てのvolumeを列挙する。
	// 一回のレスポンスで返す個数指定と、ページネーションの設定が行える。
	// 詳細な使い方は、引数とレスポンスのデータ型のコメントを参照。
	ListVolumes(*ListVolumesRequest, VolumeService_ListVolumesServer) error
	// 指定したvolumeのメタデータを取得する。
	InspectVolume(context.Context, *InspectVolumeRequest) (*InspectVolumeResponse, error)
}

// UnimplementedVolumeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVolumeServiceServer struct {
}

func (*UnimplementedVolumeServiceServer) CreateVolume(ctx context.Context, req *CreateVolumeRequest) (*CreateVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolume not implemented")
}
func (*UnimplementedVolumeServiceServer) DeleteVolume(ctx context.Context, req *DeleteVolumeRequest) (*DeleteVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolume not implemented")
}
func (*UnimplementedVolumeServiceServer) ListVolumes(req *ListVolumesRequest, srv VolumeService_ListVolumesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListVolumes not implemented")
}
func (*UnimplementedVolumeServiceServer) InspectVolume(ctx context.Context, req *InspectVolumeRequest) (*InspectVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectVolume not implemented")
}

func RegisterVolumeServiceServer(s *grpc.Server, srv VolumeServiceServer) {
	s.RegisterService(&_VolumeService_serviceDesc, srv)
}

func _VolumeService_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elton.v2.VolumeService/CreateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).CreateVolume(ctx, req.(*CreateVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elton.v2.VolumeService/DeleteVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).DeleteVolume(ctx, req.(*DeleteVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_ListVolumes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListVolumesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VolumeServiceServer).ListVolumes(m, &volumeServiceListVolumesServer{stream})
}

type VolumeService_ListVolumesServer interface {
	Send(*ListVolumesResponse) error
	grpc.ServerStream
}

type volumeServiceListVolumesServer struct {
	grpc.ServerStream
}

func (x *volumeServiceListVolumesServer) Send(m *ListVolumesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VolumeService_InspectVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).InspectVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elton.v2.VolumeService/InspectVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).InspectVolume(ctx, req.(*InspectVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VolumeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elton.v2.VolumeService",
	HandlerType: (*VolumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVolume",
			Handler:    _VolumeService_CreateVolume_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _VolumeService_DeleteVolume_Handler,
		},
		{
			MethodName: "InspectVolume",
			Handler:    _VolumeService_InspectVolume_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListVolumes",
			Handler:       _VolumeService_ListVolumes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fs.proto",
}

// CommitServiceClient is the client API for CommitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommitServiceClient interface {
	// 指定したvolume内の最新のコミットを取得する。
	GetLastCommit(ctx context.Context, in *GetLastCommitRequest, opts ...grpc.CallOption) (*GetLastCommitResponse, error)
	// コミットの履歴を取得する。
	// 一回のレスポンスで返す個数指定と、ページネーションの設定が行える。
	// 詳細な使い方は、引数とレスポンスのデータ型のコメントを参照。
	ListCommits(ctx context.Context, in *ListCommitsRequest, opts ...grpc.CallOption) (CommitService_ListCommitsClient, error)
	// コミットを作成する。
	//
	// Error:
	// - invalid argument: If trying cross-volume commit or parent id combination
	//                     is invalid.
	// - internal:
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
}

type commitServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommitServiceClient(cc *grpc.ClientConn) CommitServiceClient {
	return &commitServiceClient{cc}
}

func (c *commitServiceClient) GetLastCommit(ctx context.Context, in *GetLastCommitRequest, opts ...grpc.CallOption) (*GetLastCommitResponse, error) {
	out := new(GetLastCommitResponse)
	err := c.cc.Invoke(ctx, "/elton.v2.CommitService/GetLastCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitServiceClient) ListCommits(ctx context.Context, in *ListCommitsRequest, opts ...grpc.CallOption) (CommitService_ListCommitsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CommitService_serviceDesc.Streams[0], "/elton.v2.CommitService/ListCommits", opts...)
	if err != nil {
		return nil, err
	}
	x := &commitServiceListCommitsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommitService_ListCommitsClient interface {
	Recv() (*ListCommitsResponse, error)
	grpc.ClientStream
}

type commitServiceListCommitsClient struct {
	grpc.ClientStream
}

func (x *commitServiceListCommitsClient) Recv() (*ListCommitsResponse, error) {
	m := new(ListCommitsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commitServiceClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, "/elton.v2.CommitService/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitServiceServer is the server API for CommitService service.
type CommitServiceServer interface {
	// 指定したvolume内の最新のコミットを取得する。
	GetLastCommit(context.Context, *GetLastCommitRequest) (*GetLastCommitResponse, error)
	// コミットの履歴を取得する。
	// 一回のレスポンスで返す個数指定と、ページネーションの設定が行える。
	// 詳細な使い方は、引数とレスポンスのデータ型のコメントを参照。
	ListCommits(*ListCommitsRequest, CommitService_ListCommitsServer) error
	// コミットを作成する。
	//
	// Error:
	// - invalid argument: If trying cross-volume commit or parent id combination
	//                     is invalid.
	// - internal:
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
}

// UnimplementedCommitServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCommitServiceServer struct {
}

func (*UnimplementedCommitServiceServer) GetLastCommit(ctx context.Context, req *GetLastCommitRequest) (*GetLastCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastCommit not implemented")
}
func (*UnimplementedCommitServiceServer) ListCommits(req *ListCommitsRequest, srv CommitService_ListCommitsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCommits not implemented")
}
func (*UnimplementedCommitServiceServer) Commit(ctx context.Context, req *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}

func RegisterCommitServiceServer(s *grpc.Server, srv CommitServiceServer) {
	s.RegisterService(&_CommitService_serviceDesc, srv)
}

func _CommitService_GetLastCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServiceServer).GetLastCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elton.v2.CommitService/GetLastCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServiceServer).GetLastCommit(ctx, req.(*GetLastCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitService_ListCommits_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCommitsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommitServiceServer).ListCommits(m, &commitServiceListCommitsServer{stream})
}

type CommitService_ListCommitsServer interface {
	Send(*ListCommitsResponse) error
	grpc.ServerStream
}

type commitServiceListCommitsServer struct {
	grpc.ServerStream
}

func (x *commitServiceListCommitsServer) Send(m *ListCommitsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CommitService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elton.v2.CommitService/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServiceServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommitService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elton.v2.CommitService",
	HandlerType: (*CommitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLastCommit",
			Handler:    _CommitService_GetLastCommit_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _CommitService_Commit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCommits",
			Handler:       _CommitService_ListCommits_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fs.proto",
}
