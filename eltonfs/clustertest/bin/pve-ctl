#!/usr/bin/env bash
# pve-ctl - non-interactive Proxmox VE API clients for help operation of elton test infrastructures.
#
# Usage:
#   pve-ctl stop_all                - Stop all VMs.
#   pve-ctl rebuild_all             - Rebuild test environment from scratch.
#   pve-ctl remove_vms              - Stop and remove all VMs.
#   pve-ctl ssh_to_vm <NODE> <VMID> - Connect to the VM using SSH.

set -eu
# Absolute path to pve-ctl command.
SELF=$(readlink -f "$0")
# Absolute path to the directory containing pve-ctl command.
SELF_DIR=$(dirname "$SELF")
# IP address or domain name of the Proxmox VE master node.
: "${API_NODE:=elton-pve.internal.t-lab.cs.teu.ac.jp}"
# Gateway address
: "${GATEWAY:=192.168.189.1}"
# IP address used on the setup node.
: "${SETUP_NODE:=192.168.189.149}"
# Netmask used on the setup node.
: "${SETUP_NODE_NETMASK:=24}"
# Path to bash script file.
: "${SETUP_SCRIPT_FILE:=$SELF_DIR/../node-setup.sh}"
# URL to latest cloud image of the Ubuntu 19.04.
: "${UBUNTU_IMAGE_URL:=https://cloud-images.ubuntu.com/disco/current/disco-server-cloudimg-amd64.img}"
# Path to temporary file location.
: "${UBUNTU_IMAGE_PATH:=/var/tmp/ubuntu-19.04.img}"
# Name of main storage.
: "${STORAGE:=ssd}"
# Additional disk size allocated to the setup node (in megabytes).
: "${ADDITIONAL_DISK_SIZE:=5G}"

remote() {
  # 空白やエスケープが必要な引数を持つコマンドを、ssh経由で正しく実行するための処置。
  # 引数をNULL区切りにすることで、問題発生を回避する。
  printf "%s\0" "$@" | ssh "root@${API_NODE}" -- xargs -0 env
}

remote_on() {
  local node_name=$1
  local ip=$(get_node_ip2 "$node_name")

  API_NODE=$ip
  shift
  remote "$@"
}

unsafe_ssh() {
  ssh -T -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "$@"
}

ssh_to_vm() {
  local node=$1
  local vmid=$2
  shift
  shift

  local ip
  ip=$(get_node_ip "$node" "$vmid")
  unsafe_ssh "root@$ip" "$@"
}

list_nodes() {
  remote pvesh get /nodes --output-format=json |
    jq '.[].node' --raw-output |
    sort -u
}

list_vms() {
  local node=$1
  remote pvesh get "/nodes/$node/qemu" --output-format=json |
    jq '.[].vmid' --raw-output
}

get_node_ip2() {
  local node_name=$1
  remote pvesh get "/cluster/status" --output-format=json | \
    jq ".[] | if .name == \"$node_name\" then . else empty end | .ip" --raw-output
}

is_protected() {
  local node=$1
  local vmid=$2
  remote pvesh get "/nodes/$node/qemu/$vmid/config" --output-format=json |
    jq '.protection // 0' --raw-output |
    grep -v '^0$' >/dev/null
}

is_template() {
  local node=$1
  local vmid=$2
  remote pvesh get "/nodes/$node/qemu/$vmid/config" --output-format=json |
    jq '.template // 0' --raw-output |
    grep -v '^0$' >/dev/null
}

get_vm_name() {
  local node=$1
  local vmid=$2
  remote pvesh get "/nodes/$node/qemu/$vmid/config" --output-format=json |
    jq '.name' --raw-output
}

get_node_status() {
  local node=$1
  local vmid=$2
  remote pvesh get "/nodes/$node/qemu/$vmid/status/current" --output-format=json |
    jq '.status' --raw-output
}

get_node_ip() {
  local node=$1
  local vmid=$2
  remote pvesh get "/nodes/$node/qemu/$vmid/config" --output-format=json |
    jq '.ipconfig0' --raw-output |
    sed 's/,/\n/g' |
    grep '^ip=' |
    sed 's@^ip=@@; s@/[0-9]\+$@@'
}

wait_node_to_up() {
  local node=$1
  local vmid=$2

  # Wait for all cloud-init tasks to complete.
  until ssh_to_vm "$node" "$vmid" systemctl status cloud-final | grep 'Active: active (exited) since'; do
    sleep 1
  done
  # The target host is started and all cloud-init tasks are completed.
}

wait_node_to_down() {
  local node=$1
  local vmid=$2

  while [[ "$(get_node_status "$node" "$vmid")" != "stopped" ]]; do
    sleep 1
  done
}

stop_vm() {
  local node=$1
  local vmid=$2
  if remote pvesh get "/nodes/$node/qemu/$vmid/status/current" --output-format=json; then
    if [[ "$(get_node_status "$node" "$vmid")" != "stopped" ]]; then
      remote pvesh create "/nodes/$node/qemu/$vmid/status/stop" ||
        echo 'WARNING: Ignored an error that occurred in "pvesh create" command.'
    fi
  fi
}

remove_vm() {
  local node=$1
  local vmid=$2
  if remote pvesh get "/nodes/$node/qemu/$vmid/status/current" --output-format=json; then
    stop_vm "$node" "$vmid"

    # WORKAROUND: The "pvesh delete" command always return non-zero exit code.
    #             Ignore an error to prevent script interruption.
    remote pvesh delete "/nodes/$node/qemu/$vmid" ||
      echo 'WARNING: Ignored an error that occurred in "pvesh delete" command.'
  fi
}

clone_template() {
  local node=$1
  local from=$2
  local to=$3
  local name=$4
  local desc=$5

  remote pvesh create "/nodes/$node/qemu/$from/clone" \
    --newid "$to" \
    --name "$name" \
    --description "$desc" \
    --pool clustertest \
    --full 1
  # Unset the protection flag.
  remote pvesh set "/nodes/$node/qemu/$to/config" \
    --protection 0
}

set_storage() {
  local node=elton-pve1
  local vmid=$1

  # Download latest image.
  remote rm -f "$UBUNTU_IMAGE_PATH"
  remote wget "$UBUNTU_IMAGE_URL" -O "$UBUNTU_IMAGE_PATH"
  # Set disk to the VM.
  remote qm importdisk "$vmid" "$UBUNTU_IMAGE_PATH" "$STORAGE" --format qcow2
  remote pvesh set "/nodes/$node/qemu/$vmid/config" \
    --scsi0 "$STORAGE:$vmid/vm-$vmid-disk-0.qcow2,discard=on,ssd=on,cache=unsafe"
  # Increase disk size.
  remote pvesh set "/nodes/$node/qemu/$vmid/resize" \
    --disk scsi0 \
    --size "+$ADDITIONAL_DISK_SIZE"
}

convert_to_template() {
  local node=elton-pve1
  local vmid=$1

  remote pvesh create "nodes/$node/qemu/$vmid/template"
}

# Stop all VMs.
stop_all() {
  for node in $(list_nodes); do
    for vmid in $(list_vms "$node"); do
      stop_vm "$node" "$vmid"
    done
  done
}

rebuild_all() {
  exec "$SELF_DIR/pve-rebuild-template"
}

# Remove all VMs unless the protected flag is set.
remove_vms() {
  for node in $(list_nodes); do
    for vmid in $(list_vms "$node"); do
      if is_protected "$node" "$vmid" || is_template "$node" "$vmid"; then
        continue
      fi
      remove_vm "$node" "$vmid"
    done
  done
}

# Remove all VMs and templates except the protected VMs and templates.
remove_all() {
  for node in $(list_nodes); do
    for vmid in $(list_vms "$node"); do
      if is_protected "$node" "$vmid"; then
        continue
      fi
      remove_vm "$node" "$vmid"
    done
  done
}

help() {
  sed '1d; /^$/Q; s/^# \?//' "$SELF"
}


if [ $# -eq 0 ]; then
  # Show help if no argument.
  help
  exit 1
fi

# Execute specified command.
"$@"
