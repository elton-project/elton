syntax = "proto3";

package proto2;

// ==== システムの構成要素 ====
// System: 分散ストレージelton2のプログラムのこと。
// Subsystem: メタデータ管理、ストレージなど個々の機能を提供しているプログラムのこと。
//            1つのサブシステムは、複数のサービスを提供する。
// Process: OS用語でのプロセスとほぼ同義。1プロセスは、１つまたは複数のサービスを提供する。
// Service: サブシステムの実態のこと。1つのサービスは、単一の機能を提供する。

// ==== メッセージング機構 ====
// [Listener] : イベントの発生通知を受け取る。EventListenerを実装する。
// [Manager]  : どのListenerが何をlistenしているのか管理する。
// [Deliverer]: イベントを送信する。
//
// [Listener]  --> [Manager]  : Listen状態を登録
// [Manager]   --> [Deliverer]: Listen状態が変化したことを通知
// [Deliverer] --> [Listener] : イベント発生を通知


service EventManager {
    // 指定したイベントをlistenする。
    // [Listener] --> [Manager]
    rpc Listen (EventListenerInfo) returns (ListenResult);
    // 指定したイベントをunlistenする。
    // [Listener] --> [Manager]
    rpc Unlisten (EventListenerInfo) returns (UnlistenResult);
    // Listen状態の変化をlistenする。
    // [Deliverer] --> [Manager]
    rpc ListenStatusChanges (EventDelivererInfo) returns (ListenStatusChangesResult);
    // Listen状態の変化をunlistenする。
    // [Deliverer] --> [Manager]
    rpc UnlistenStatusChanges (EventDelivererInfo) returns (UnlistenStatusChangesResult);
}

service EventDeliverer {
    // listen状態が変化したときに呼び出される。
    // [Manager] --> [Deliverer]
    rpc OnListenChanged (AllEventListenerInfo) returns (Empty);
}

service EventListener {
    // イベントが発生したときに呼び出される。
    // [Deliverer] --> [Listener]
    rpc OnNodeAdded (Node) returns (Empty);
    rpc OnNodeStopping (Node) returns (Empty);
    rpc OnNodeStopped (Node) returns (Empty);
    rpc OnNodeDetaching (Node) returns (Empty);
    rpc OnNodeDetached (Node) returns (Empty);

    rpc OnObjectCreated (ObjectInfo) returns (Empty);
    rpc OnObjectDeleted (ObjectInfo) returns (Empty);
    rpc OnObjectCacheCreated (ObjectInfo) returns (Empty);
    rpc OnObjectCacheDeleted (ObjectInfo) returns (Empty);
}

service ControllerService {
    rpc StopSystem (Empty) returns (Empty);

    rpc AddNode (Node) returns (Empty);
    rpc StopNode (Node) returns (Empty);
    rpc DetachNode (Node) returns (Empty);
}

// Storageサブシステムが、他のサブシステムに公開しているサービス。
service StorageService {
    rpc CreateObject (Object) returns (Empty);
    rpc DeleteObject (ObjectInfo) returns (Empty);
}

service LocalStorageService {
    rpc CreateObjectByPath (ObjectPath) returns (Empty);
    rpc DownloadObject (ObjectInfo) returns (Empty);
    rpc RLockObject (ObjectInfo) returns (Empty);
    rpc RUnlockObject (ObjectInfo) returns (Empty);
}

// Storageサブシステム内部で利用するサービス。
// Storageサブシステム毎に定義する。
service InternalStorageService {
    // TODO
    rpc GetObject (ObjectInfo) returns (Object);
    rpc PutObject (Object) returns (Empty);
}

enum EventType {
    ET_ALL = 0;
    ET_STATUS_CHANGED = 10;
    ET_NODE_ADDED = 1;
    ET_NODE_STOPPING = 2;
    ET_NODE_STOPPED = 3;
    ET_NODE_DETACHING = 4;
    ET_NODE_DETACHED = 5;
    ET_OBJECT_CREATED = 6;
    ET_OBJECT_DELETED = 7;
    ET_OBJECT_CACHE_CREATED = 8;
    ET_OBJECT_CACHE_DELETED = 9;
}

// ==== State Transition Diagram ====
//
// [SS_UNAVAILABLE]
//       |
// +-----|---------------+
// |     V               |
// |  [SS_INIT_PHASE_0]  |
// |     |               |
// |     V               |
// |  [SS_INIT_PHASE_1]  |
// |     |               |
// |     V               |
// |  [SS_INIT_PHASE_2]  |
// |     |               |
// +-----|---------------+
//       |
// +-----|-------------------------+
// |     V                         |
// |  [SS_OPERATING_RW] <-------+  |
// |     |                      |  |
// |     V                      |  |
// |  [SS_OPERATING_RW_TO_RO]   |  |
// |     |                      |  |
// |     V                      |  |
// |  [SS_OPERATING_RO] --------+  |
// |     |                         |
// +-----|-------------------------+
//       V
// [SHUTDOWN]
enum SystemStatus {
    SS_UNAVAILABLE = 0;

    // launcherが起動した状態。
    SS_INIT_PHASE_0 = 10;
    // 各サブシステムが起動中の状態。
    SS_INIT_PHASE_1 = 11;
    // 各サブシステムが起動完了した状態。
    SS_INIT_PHASE_2 = 12;

    // 通常運用の状態。
    SS_OPERATING_RW = 20;
    // Read Onlyモードに移行中の状態
    SS_OPERATING_RW_TO_RO = 21;
    // Read Onlyモードで運用中。
    SS_OPERATING_RO = 22;

    // 各サブシステムのプロセスを終了している状態。
    SS_SHUTDOWN = 30;
}

// ==== State Transition Diagram ====
//
//       [SSS_UNKNOWN]
//          |
//          v
//   +-- [SSS_STOPPED]  <----+
//   |      |                |
//   |      v                |
//   +-- [SSS_STARTING]      |
//   |      |                |
//   |      v                |
//   +-- [SSS_STARTED]       |
//   |      |                |
//   |      v                |
//   +-- [SSS_STOPPING]  ----+
//   |
//   V
// [Failed]
enum SubServiceStatus {
    SSS_UNKNOWN = 0;
    SSS_STOPPED = 1;
    SSS_STARTING = 2;
    SSS_OPERATING = 3;
    SSS_STOPPING = 4;
    SSS_FAILED = 5;
}

// ==== State Transition Diagram ====
//
// [OS_UNKNOWN]
//    |
//    v
// [OS_CREATING]
//    |  +------------------+
//    v  v                  |
// [OS_CREATED]  ----->  [OS_LOST]
//    |                     |
//    v                     |
// [OS_DELETING] <----------+
//    |
//    v
// [OS_DELETED]
enum ObjectStatus {
    OS_UNKNOWN = 0;
    OS_CREATING = 1;
    OS_CREATED = 2;
    OS_LOST = 3;
    OS_DELETING = 4;
    OS_DELETED = 5;
}

message Empty {
}

message Node {
    uint64 id = 1;
    repeated string group = 2;
    string address = 3;
}

message ObjectInfo {
    string id = 1;
    uint64 version = 2;
}

message Object {
    ObjectInfo info = 1;
    bytes body = 2;
}

message ObjectCache {
    ObjectInfo obj = 1;
    Node node = 2;
}

message ObjectPath {
    ObjectInfo obj = 1;
    string path = 2;
}

message Status {
    bool writable = 1;
    SystemStatus runLevel = 2;
}

message EventListenerInfo {
    Node node = 1;
    EventType type = 2;
}

message AllEventListenerInfo {
    repeated EventListenerInfo nodes = 1;
}

message EventDelivererInfo {
    Node node = 1;
}

message ListenResult {
    string error = 1;
}

message UnlistenResult {
    string error = 1;
}

message ListenStatusChangesResult {
    string error = 1;
}

message UnlistenStatusChangesResult {
    string error = 1;
}
