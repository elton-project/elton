// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package proto2

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventType int32

const (
	EventType_ET_ALL                  EventType = 0
	EventType_ET_STATUS_CHANGED       EventType = 10
	EventType_ET_NODE_ADDED           EventType = 1
	EventType_ET_NODE_STOPPING        EventType = 2
	EventType_ET_NODE_STOPPED         EventType = 3
	EventType_ET_NODE_DETACHING       EventType = 4
	EventType_ET_NODE_DETACHED        EventType = 5
	EventType_ET_OBJECT_CREATED       EventType = 6
	EventType_ET_OBJECT_DELETED       EventType = 7
	EventType_ET_OBJECT_CACHE_CREATED EventType = 8
	EventType_ET_OBJECT_CACHE_DELETED EventType = 9
)

var EventType_name = map[int32]string{
	0:  "ET_ALL",
	10: "ET_STATUS_CHANGED",
	1:  "ET_NODE_ADDED",
	2:  "ET_NODE_STOPPING",
	3:  "ET_NODE_STOPPED",
	4:  "ET_NODE_DETACHING",
	5:  "ET_NODE_DETACHED",
	6:  "ET_OBJECT_CREATED",
	7:  "ET_OBJECT_DELETED",
	8:  "ET_OBJECT_CACHE_CREATED",
	9:  "ET_OBJECT_CACHE_DELETED",
}

var EventType_value = map[string]int32{
	"ET_ALL":                  0,
	"ET_STATUS_CHANGED":       10,
	"ET_NODE_ADDED":           1,
	"ET_NODE_STOPPING":        2,
	"ET_NODE_STOPPED":         3,
	"ET_NODE_DETACHING":       4,
	"ET_NODE_DETACHED":        5,
	"ET_OBJECT_CREATED":       6,
	"ET_OBJECT_DELETED":       7,
	"ET_OBJECT_CACHE_CREATED": 8,
	"ET_OBJECT_CACHE_DELETED": 9,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

// ==== State Transition Diagram ====
//
// [SS_UNAVAILABLE]
//       |
// +-----|---------------+
// |     V               |
// |  [SS_INIT_PHASE_0]  |
// |     |               |
// |     V               |
// |  [SS_INIT_PHASE_1]  |
// |     |               |
// |     V               |
// |  [SS_INIT_PHASE_2]  |
// |     |               |
// +-----|---------------+
//       |
// +-----|-------------------------+
// |     V                         |
// |  [SS_OPERATING_RW] <-------+  |
// |     |                      |  |
// |     V                      |  |
// |  [SS_OPERATING_RW_TO_RO]   |  |
// |     |                      |  |
// |     V                      |  |
// |  [SS_OPERATING_RO] --------+  |
// |     |                         |
// +-----|-------------------------+
//       V
// [SHUTDOWN]
type SystemStatus int32

const (
	SystemStatus_SS_UNAVAILABLE SystemStatus = 0
	// launcherが起動した状態。
	SystemStatus_SS_INIT_PHASE_0 SystemStatus = 10
	// 各サブシステムが起動中の状態。
	SystemStatus_SS_INIT_PHASE_1 SystemStatus = 11
	// 各サブシステムが起動完了した状態。
	SystemStatus_SS_INIT_PHASE_2 SystemStatus = 12
	// 通常運用の状態。
	SystemStatus_SS_OPERATING_RW SystemStatus = 20
	// Read Onlyモードに移行中の状態
	SystemStatus_SS_OPERATING_RW_TO_RO SystemStatus = 21
	// Read Onlyモードで運用中。
	SystemStatus_SS_OPERATING_RO SystemStatus = 22
	// 各サブシステムのプロセスを終了している状態。
	SystemStatus_SS_SHUTDOWN SystemStatus = 30
)

var SystemStatus_name = map[int32]string{
	0:  "SS_UNAVAILABLE",
	10: "SS_INIT_PHASE_0",
	11: "SS_INIT_PHASE_1",
	12: "SS_INIT_PHASE_2",
	20: "SS_OPERATING_RW",
	21: "SS_OPERATING_RW_TO_RO",
	22: "SS_OPERATING_RO",
	30: "SS_SHUTDOWN",
}

var SystemStatus_value = map[string]int32{
	"SS_UNAVAILABLE":        0,
	"SS_INIT_PHASE_0":       10,
	"SS_INIT_PHASE_1":       11,
	"SS_INIT_PHASE_2":       12,
	"SS_OPERATING_RW":       20,
	"SS_OPERATING_RW_TO_RO": 21,
	"SS_OPERATING_RO":       22,
	"SS_SHUTDOWN":           30,
}

func (x SystemStatus) String() string {
	return proto.EnumName(SystemStatus_name, int32(x))
}

func (SystemStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

// ==== State Transition Diagram ====
//
//       [SSS_UNKNOWN]
//          |
//          v
//   +-- [SSS_STOPPED]  <----+
//   |      |                |
//   |      v                |
//   +-- [SSS_STARTING]      |
//   |      |                |
//   |      v                |
//   +-- [SSS_STARTED]       |
//   |      |                |
//   |      v                |
//   +-- [SSS_STOPPING]  ----+
//   |
//   V
// [Failed]
type SubServiceStatus int32

const (
	SubServiceStatus_SSS_UNKNOWN   SubServiceStatus = 0
	SubServiceStatus_SSS_STOPPED   SubServiceStatus = 1
	SubServiceStatus_SSS_STARTING  SubServiceStatus = 2
	SubServiceStatus_SSS_OPERATING SubServiceStatus = 3
	SubServiceStatus_SSS_STOPPING  SubServiceStatus = 4
	SubServiceStatus_SSS_FAILED    SubServiceStatus = 5
)

var SubServiceStatus_name = map[int32]string{
	0: "SSS_UNKNOWN",
	1: "SSS_STOPPED",
	2: "SSS_STARTING",
	3: "SSS_OPERATING",
	4: "SSS_STOPPING",
	5: "SSS_FAILED",
}

var SubServiceStatus_value = map[string]int32{
	"SSS_UNKNOWN":   0,
	"SSS_STOPPED":   1,
	"SSS_STARTING":  2,
	"SSS_OPERATING": 3,
	"SSS_STOPPING":  4,
	"SSS_FAILED":    5,
}

func (x SubServiceStatus) String() string {
	return proto.EnumName(SubServiceStatus_name, int32(x))
}

func (SubServiceStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

// ==== State Transition Diagram ====
//
// [OS_UNKNOWN]
//    |
//    v
// [OS_CREATING]
//    |  +------------------+
//    v  v                  |
// [OS_CREATED]  ----->  [OS_LOST]
//    |                     |
//    v                     |
// [OS_DELETING] <----------+
//    |
//    v
// [OS_DELETED]
type ObjectStatus int32

const (
	ObjectStatus_OS_UNKNOWN  ObjectStatus = 0
	ObjectStatus_OS_CREATING ObjectStatus = 1
	ObjectStatus_OS_CREATED  ObjectStatus = 2
	ObjectStatus_OS_LOST     ObjectStatus = 3
	ObjectStatus_OS_DELETING ObjectStatus = 4
	ObjectStatus_OS_DELETED  ObjectStatus = 5
)

var ObjectStatus_name = map[int32]string{
	0: "OS_UNKNOWN",
	1: "OS_CREATING",
	2: "OS_CREATED",
	3: "OS_LOST",
	4: "OS_DELETING",
	5: "OS_DELETED",
}

var ObjectStatus_value = map[string]int32{
	"OS_UNKNOWN":  0,
	"OS_CREATING": 1,
	"OS_CREATED":  2,
	"OS_LOST":     3,
	"OS_DELETING": 4,
	"OS_DELETED":  5,
}

func (x ObjectStatus) String() string {
	return proto.EnumName(ObjectStatus_name, int32(x))
}

func (ObjectStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{3}
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Node struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Group                []string `protobuf:"bytes,2,rep,name=group,proto3" json:"group,omitempty"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Node) GetGroup() []string {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *Node) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ObjectInfo struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version              uint64   `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObjectInfo) Reset()         { *m = ObjectInfo{} }
func (m *ObjectInfo) String() string { return proto.CompactTextString(m) }
func (*ObjectInfo) ProtoMessage()    {}
func (*ObjectInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

func (m *ObjectInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectInfo.Unmarshal(m, b)
}
func (m *ObjectInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectInfo.Marshal(b, m, deterministic)
}
func (m *ObjectInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectInfo.Merge(m, src)
}
func (m *ObjectInfo) XXX_Size() int {
	return xxx_messageInfo_ObjectInfo.Size(m)
}
func (m *ObjectInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectInfo proto.InternalMessageInfo

func (m *ObjectInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ObjectInfo) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type Object struct {
	Info                 *ObjectInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Body                 []byte      `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Object) Reset()         { *m = Object{} }
func (m *Object) String() string { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()    {}
func (*Object) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{3}
}

func (m *Object) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Object.Unmarshal(m, b)
}
func (m *Object) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Object.Marshal(b, m, deterministic)
}
func (m *Object) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Object.Merge(m, src)
}
func (m *Object) XXX_Size() int {
	return xxx_messageInfo_Object.Size(m)
}
func (m *Object) XXX_DiscardUnknown() {
	xxx_messageInfo_Object.DiscardUnknown(m)
}

var xxx_messageInfo_Object proto.InternalMessageInfo

func (m *Object) GetInfo() *ObjectInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *Object) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type ObjectCache struct {
	Obj                  *ObjectInfo `protobuf:"bytes,1,opt,name=obj,proto3" json:"obj,omitempty"`
	Node                 *Node       `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ObjectCache) Reset()         { *m = ObjectCache{} }
func (m *ObjectCache) String() string { return proto.CompactTextString(m) }
func (*ObjectCache) ProtoMessage()    {}
func (*ObjectCache) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{4}
}

func (m *ObjectCache) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectCache.Unmarshal(m, b)
}
func (m *ObjectCache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectCache.Marshal(b, m, deterministic)
}
func (m *ObjectCache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectCache.Merge(m, src)
}
func (m *ObjectCache) XXX_Size() int {
	return xxx_messageInfo_ObjectCache.Size(m)
}
func (m *ObjectCache) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectCache.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectCache proto.InternalMessageInfo

func (m *ObjectCache) GetObj() *ObjectInfo {
	if m != nil {
		return m.Obj
	}
	return nil
}

func (m *ObjectCache) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type ObjectPath struct {
	Obj                  *ObjectInfo `protobuf:"bytes,1,opt,name=obj,proto3" json:"obj,omitempty"`
	Path                 string      `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ObjectPath) Reset()         { *m = ObjectPath{} }
func (m *ObjectPath) String() string { return proto.CompactTextString(m) }
func (*ObjectPath) ProtoMessage()    {}
func (*ObjectPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{5}
}

func (m *ObjectPath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectPath.Unmarshal(m, b)
}
func (m *ObjectPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectPath.Marshal(b, m, deterministic)
}
func (m *ObjectPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectPath.Merge(m, src)
}
func (m *ObjectPath) XXX_Size() int {
	return xxx_messageInfo_ObjectPath.Size(m)
}
func (m *ObjectPath) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectPath.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectPath proto.InternalMessageInfo

func (m *ObjectPath) GetObj() *ObjectInfo {
	if m != nil {
		return m.Obj
	}
	return nil
}

func (m *ObjectPath) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type Status struct {
	Writable             bool         `protobuf:"varint,1,opt,name=writable,proto3" json:"writable,omitempty"`
	RunLevel             SystemStatus `protobuf:"varint,2,opt,name=runLevel,proto3,enum=proto2.SystemStatus" json:"runLevel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{6}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetWritable() bool {
	if m != nil {
		return m.Writable
	}
	return false
}

func (m *Status) GetRunLevel() SystemStatus {
	if m != nil {
		return m.RunLevel
	}
	return SystemStatus_SS_UNAVAILABLE
}

type EventListenerInfo struct {
	Node                 *Node     `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Type                 EventType `protobuf:"varint,2,opt,name=type,proto3,enum=proto2.EventType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *EventListenerInfo) Reset()         { *m = EventListenerInfo{} }
func (m *EventListenerInfo) String() string { return proto.CompactTextString(m) }
func (*EventListenerInfo) ProtoMessage()    {}
func (*EventListenerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{7}
}

func (m *EventListenerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventListenerInfo.Unmarshal(m, b)
}
func (m *EventListenerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventListenerInfo.Marshal(b, m, deterministic)
}
func (m *EventListenerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventListenerInfo.Merge(m, src)
}
func (m *EventListenerInfo) XXX_Size() int {
	return xxx_messageInfo_EventListenerInfo.Size(m)
}
func (m *EventListenerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EventListenerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EventListenerInfo proto.InternalMessageInfo

func (m *EventListenerInfo) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *EventListenerInfo) GetType() EventType {
	if m != nil {
		return m.Type
	}
	return EventType_ET_ALL
}

type AllEventListenerInfo struct {
	Nodes                []*EventListenerInfo `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AllEventListenerInfo) Reset()         { *m = AllEventListenerInfo{} }
func (m *AllEventListenerInfo) String() string { return proto.CompactTextString(m) }
func (*AllEventListenerInfo) ProtoMessage()    {}
func (*AllEventListenerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{8}
}

func (m *AllEventListenerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllEventListenerInfo.Unmarshal(m, b)
}
func (m *AllEventListenerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllEventListenerInfo.Marshal(b, m, deterministic)
}
func (m *AllEventListenerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllEventListenerInfo.Merge(m, src)
}
func (m *AllEventListenerInfo) XXX_Size() int {
	return xxx_messageInfo_AllEventListenerInfo.Size(m)
}
func (m *AllEventListenerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AllEventListenerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AllEventListenerInfo proto.InternalMessageInfo

func (m *AllEventListenerInfo) GetNodes() []*EventListenerInfo {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type EventDelivererInfo struct {
	Node                 *Node    `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventDelivererInfo) Reset()         { *m = EventDelivererInfo{} }
func (m *EventDelivererInfo) String() string { return proto.CompactTextString(m) }
func (*EventDelivererInfo) ProtoMessage()    {}
func (*EventDelivererInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{9}
}

func (m *EventDelivererInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventDelivererInfo.Unmarshal(m, b)
}
func (m *EventDelivererInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventDelivererInfo.Marshal(b, m, deterministic)
}
func (m *EventDelivererInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDelivererInfo.Merge(m, src)
}
func (m *EventDelivererInfo) XXX_Size() int {
	return xxx_messageInfo_EventDelivererInfo.Size(m)
}
func (m *EventDelivererInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDelivererInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EventDelivererInfo proto.InternalMessageInfo

func (m *EventDelivererInfo) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type ListenResult struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListenResult) Reset()         { *m = ListenResult{} }
func (m *ListenResult) String() string { return proto.CompactTextString(m) }
func (*ListenResult) ProtoMessage()    {}
func (*ListenResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{10}
}

func (m *ListenResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenResult.Unmarshal(m, b)
}
func (m *ListenResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenResult.Marshal(b, m, deterministic)
}
func (m *ListenResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenResult.Merge(m, src)
}
func (m *ListenResult) XXX_Size() int {
	return xxx_messageInfo_ListenResult.Size(m)
}
func (m *ListenResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenResult.DiscardUnknown(m)
}

var xxx_messageInfo_ListenResult proto.InternalMessageInfo

func (m *ListenResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type UnlistenResult struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnlistenResult) Reset()         { *m = UnlistenResult{} }
func (m *UnlistenResult) String() string { return proto.CompactTextString(m) }
func (*UnlistenResult) ProtoMessage()    {}
func (*UnlistenResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{11}
}

func (m *UnlistenResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnlistenResult.Unmarshal(m, b)
}
func (m *UnlistenResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnlistenResult.Marshal(b, m, deterministic)
}
func (m *UnlistenResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlistenResult.Merge(m, src)
}
func (m *UnlistenResult) XXX_Size() int {
	return xxx_messageInfo_UnlistenResult.Size(m)
}
func (m *UnlistenResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlistenResult.DiscardUnknown(m)
}

var xxx_messageInfo_UnlistenResult proto.InternalMessageInfo

func (m *UnlistenResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ListenStatusChangesResult struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListenStatusChangesResult) Reset()         { *m = ListenStatusChangesResult{} }
func (m *ListenStatusChangesResult) String() string { return proto.CompactTextString(m) }
func (*ListenStatusChangesResult) ProtoMessage()    {}
func (*ListenStatusChangesResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{12}
}

func (m *ListenStatusChangesResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenStatusChangesResult.Unmarshal(m, b)
}
func (m *ListenStatusChangesResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenStatusChangesResult.Marshal(b, m, deterministic)
}
func (m *ListenStatusChangesResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenStatusChangesResult.Merge(m, src)
}
func (m *ListenStatusChangesResult) XXX_Size() int {
	return xxx_messageInfo_ListenStatusChangesResult.Size(m)
}
func (m *ListenStatusChangesResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenStatusChangesResult.DiscardUnknown(m)
}

var xxx_messageInfo_ListenStatusChangesResult proto.InternalMessageInfo

func (m *ListenStatusChangesResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type UnlistenStatusChangesResult struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnlistenStatusChangesResult) Reset()         { *m = UnlistenStatusChangesResult{} }
func (m *UnlistenStatusChangesResult) String() string { return proto.CompactTextString(m) }
func (*UnlistenStatusChangesResult) ProtoMessage()    {}
func (*UnlistenStatusChangesResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{13}
}

func (m *UnlistenStatusChangesResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnlistenStatusChangesResult.Unmarshal(m, b)
}
func (m *UnlistenStatusChangesResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnlistenStatusChangesResult.Marshal(b, m, deterministic)
}
func (m *UnlistenStatusChangesResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlistenStatusChangesResult.Merge(m, src)
}
func (m *UnlistenStatusChangesResult) XXX_Size() int {
	return xxx_messageInfo_UnlistenStatusChangesResult.Size(m)
}
func (m *UnlistenStatusChangesResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlistenStatusChangesResult.DiscardUnknown(m)
}

var xxx_messageInfo_UnlistenStatusChangesResult proto.InternalMessageInfo

func (m *UnlistenStatusChangesResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterEnum("proto2.EventType", EventType_name, EventType_value)
	proto.RegisterEnum("proto2.SystemStatus", SystemStatus_name, SystemStatus_value)
	proto.RegisterEnum("proto2.SubServiceStatus", SubServiceStatus_name, SubServiceStatus_value)
	proto.RegisterEnum("proto2.ObjectStatus", ObjectStatus_name, ObjectStatus_value)
	proto.RegisterType((*Empty)(nil), "proto2.Empty")
	proto.RegisterType((*Node)(nil), "proto2.Node")
	proto.RegisterType((*ObjectInfo)(nil), "proto2.ObjectInfo")
	proto.RegisterType((*Object)(nil), "proto2.Object")
	proto.RegisterType((*ObjectCache)(nil), "proto2.ObjectCache")
	proto.RegisterType((*ObjectPath)(nil), "proto2.ObjectPath")
	proto.RegisterType((*Status)(nil), "proto2.Status")
	proto.RegisterType((*EventListenerInfo)(nil), "proto2.EventListenerInfo")
	proto.RegisterType((*AllEventListenerInfo)(nil), "proto2.AllEventListenerInfo")
	proto.RegisterType((*EventDelivererInfo)(nil), "proto2.EventDelivererInfo")
	proto.RegisterType((*ListenResult)(nil), "proto2.ListenResult")
	proto.RegisterType((*UnlistenResult)(nil), "proto2.UnlistenResult")
	proto.RegisterType((*ListenStatusChangesResult)(nil), "proto2.ListenStatusChangesResult")
	proto.RegisterType((*UnlistenStatusChangesResult)(nil), "proto2.UnlistenStatusChangesResult")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 1121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xdd, 0x6e, 0xe2, 0x46,
	0x14, 0x0e, 0x3f, 0xe1, 0xe7, 0x00, 0x8e, 0x99, 0x90, 0x94, 0x64, 0xab, 0x2a, 0x75, 0xb7, 0x69,
	0x8a, 0xba, 0xd9, 0xc4, 0xa9, 0xb6, 0xda, 0x8b, 0x56, 0x72, 0xb0, 0x93, 0xd0, 0xba, 0x18, 0xd9,
	0x66, 0xb7, 0x17, 0x95, 0x2c, 0x83, 0x67, 0x13, 0xb6, 0x8e, 0x8d, 0x8c, 0xc9, 0x0a, 0xf5, 0xaa,
	0x4f, 0xd5, 0x4a, 0x7d, 0x92, 0x3e, 0x42, 0xdf, 0x62, 0x35, 0x33, 0x36, 0x8b, 0x1d, 0x16, 0xd8,
	0xab, 0x30, 0x67, 0xbe, 0x9f, 0x33, 0xe7, 0x78, 0x8e, 0x1d, 0xa8, 0x4d, 0x70, 0xf0, 0x30, 0x1a,
	0xe2, 0xd3, 0x71, 0xe0, 0x87, 0x3e, 0x2a, 0xd0, 0x3f, 0xa2, 0x50, 0x84, 0x6d, 0xe5, 0x7e, 0x1c,
	0xce, 0x84, 0x2b, 0xc8, 0x77, 0x7d, 0x07, 0x23, 0x0e, 0xb2, 0x23, 0xa7, 0x99, 0x39, 0xca, 0x9c,
	0xe4, 0xf5, 0xec, 0xc8, 0x41, 0x0d, 0xd8, 0xbe, 0x0d, 0xfc, 0xe9, 0xb8, 0x99, 0x3d, 0xca, 0x9d,
	0x94, 0x75, 0xb6, 0x40, 0x4d, 0x28, 0xda, 0x8e, 0x13, 0xe0, 0xc9, 0xa4, 0x99, 0x3b, 0xca, 0x9c,
	0x94, 0xf5, 0x78, 0x29, 0xbc, 0x00, 0xd0, 0x06, 0x6f, 0xf1, 0x30, 0xec, 0x78, 0x6f, 0xfc, 0x05,
	0xb5, 0x32, 0x55, 0x6b, 0x42, 0xf1, 0x01, 0x07, 0x93, 0x91, 0xef, 0x35, 0xb3, 0xd4, 0x22, 0x5e,
	0x0a, 0x32, 0x14, 0x18, 0x0f, 0x1d, 0x43, 0x7e, 0xe4, 0xbd, 0xf1, 0x29, 0xab, 0x22, 0x22, 0x96,
	0xb0, 0x78, 0xfa, 0x41, 0x55, 0xa7, 0xfb, 0x08, 0x41, 0x7e, 0xe0, 0x3b, 0x33, 0x2a, 0x54, 0xd5,
	0xe9, 0x6f, 0xa1, 0x0f, 0x15, 0x86, 0x6b, 0xdb, 0xc3, 0x3b, 0x8c, 0x9e, 0x42, 0xce, 0x1f, 0xbc,
	0x5d, 0xa1, 0x44, 0xb6, 0xd1, 0x11, 0xe4, 0x3d, 0xdf, 0xc1, 0x54, 0xa8, 0x22, 0x56, 0x63, 0x18,
	0x29, 0x87, 0x4e, 0x77, 0x84, 0xab, 0xf8, 0x50, 0x3d, 0x3b, 0xbc, 0xdb, 0x50, 0x15, 0x41, 0x7e,
	0x6c, 0x87, 0x77, 0x54, 0xb5, 0xac, 0xd3, 0xdf, 0xc2, 0x2b, 0x28, 0x18, 0xa1, 0x1d, 0x4e, 0x27,
	0xe8, 0x10, 0x4a, 0xef, 0x82, 0x51, 0x68, 0x0f, 0x5c, 0x4c, 0x85, 0x4a, 0xfa, 0x7c, 0x8d, 0xce,
	0xa0, 0x14, 0x4c, 0x3d, 0x15, 0x3f, 0x60, 0x97, 0xb2, 0x39, 0xb1, 0x11, 0x9b, 0x18, 0xb3, 0x49,
	0x88, 0xef, 0x99, 0x86, 0x3e, 0x47, 0x09, 0xbf, 0x43, 0x5d, 0x79, 0xc0, 0x5e, 0xa8, 0x8e, 0x26,
	0x21, 0xf6, 0x70, 0x40, 0x6b, 0x1f, 0x1f, 0x2b, 0xf3, 0xb1, 0x63, 0xa1, 0xaf, 0x21, 0x1f, 0xce,
	0xc6, 0x38, 0x32, 0xa9, 0xc7, 0x08, 0x2a, 0x65, 0xce, 0xc6, 0x58, 0xa7, 0xdb, 0xc2, 0x35, 0x34,
	0x24, 0xd7, 0x7d, 0x6c, 0xf0, 0x1c, 0xb6, 0x89, 0xcc, 0xa4, 0x99, 0x39, 0xca, 0x9d, 0x54, 0xc4,
	0x83, 0x04, 0x7f, 0x11, 0xa9, 0x33, 0x9c, 0xf0, 0x02, 0x10, 0xdd, 0x93, 0xb1, 0x3b, 0x7a, 0xc0,
	0xc1, 0xa6, 0x79, 0x0a, 0x4f, 0xa1, 0xca, 0xe4, 0x74, 0x3c, 0x99, 0xba, 0x21, 0x79, 0x26, 0x71,
	0x10, 0xf8, 0x41, 0xf4, 0x60, 0xb1, 0x85, 0x70, 0x0c, 0x5c, 0xdf, 0x73, 0xd7, 0xe3, 0xce, 0xe1,
	0x80, 0xa9, 0xb1, 0x32, 0xb6, 0xef, 0x6c, 0xef, 0x16, 0x4f, 0x56, 0x52, 0x2e, 0xe0, 0x49, 0x2c,
	0xbd, 0x31, 0xa9, 0xf5, 0x57, 0x16, 0xca, 0xf3, 0x52, 0x22, 0x80, 0x82, 0x62, 0x5a, 0x92, 0xaa,
	0xf2, 0x5b, 0x68, 0x0f, 0xea, 0x8a, 0x69, 0x19, 0xa6, 0x64, 0xf6, 0x0d, 0xab, 0x7d, 0x23, 0x75,
	0xaf, 0x15, 0x99, 0x07, 0x54, 0x87, 0x9a, 0x62, 0x5a, 0x5d, 0x4d, 0x56, 0x2c, 0x49, 0x96, 0x15,
	0x99, 0xcf, 0xa0, 0x06, 0xf0, 0x71, 0xc8, 0x30, 0xb5, 0x5e, 0xaf, 0xd3, 0xbd, 0xe6, 0xb3, 0x68,
	0x17, 0x76, 0x12, 0x51, 0x45, 0xe6, 0x73, 0x91, 0x28, 0x0d, 0xca, 0x8a, 0x29, 0xb5, 0x6f, 0x08,
	0x36, 0xbf, 0xa8, 0xc0, 0xc2, 0x8a, 0xcc, 0x6f, 0x47, 0x60, 0xed, 0xf2, 0x67, 0xa5, 0x6d, 0x5a,
	0x6d, 0x5d, 0x91, 0x4c, 0x45, 0xe6, 0x0b, 0xc9, 0xb0, 0xac, 0xa8, 0x0a, 0x09, 0x17, 0xd1, 0x13,
	0xf8, 0x6c, 0x01, 0x4d, 0x34, 0xe6, 0x9c, 0xd2, 0xb2, 0xcd, 0x98, 0x59, 0x6e, 0xfd, 0x9d, 0x81,
	0xea, 0xe2, 0x33, 0x8b, 0x10, 0x70, 0x86, 0x61, 0xf5, 0xbb, 0xd2, 0x2b, 0xa9, 0xa3, 0x4a, 0x97,
	0xaa, 0xc2, 0x6f, 0x91, 0xe3, 0x18, 0x86, 0xd5, 0xe9, 0x76, 0x4c, 0xab, 0x77, 0x23, 0x19, 0x8a,
	0x75, 0xc6, 0xc3, 0xe3, 0xe0, 0x39, 0x5f, 0x79, 0x1c, 0x14, 0xf9, 0x6a, 0x14, 0xd4, 0x7a, 0x8a,
	0x2e, 0x99, 0x9d, 0xee, 0xb5, 0xa5, 0xbf, 0xe6, 0x1b, 0xe8, 0x00, 0xf6, 0x52, 0x41, 0xcb, 0xd4,
	0x2c, 0x5d, 0xe3, 0xf7, 0x1e, 0xe3, 0x35, 0x7e, 0x1f, 0xed, 0x40, 0xc5, 0x30, 0x2c, 0xe3, 0xa6,
	0x6f, 0xca, 0xda, 0xeb, 0x2e, 0xff, 0x45, 0xeb, 0x4f, 0xe0, 0x8d, 0xe9, 0xc0, 0x60, 0x43, 0x33,
	0x4a, 0x9e, 0x82, 0x48, 0xf6, 0xbf, 0x74, 0x09, 0x68, 0x2b, 0x0e, 0xc4, 0x4d, 0xc8, 0x20, 0x1e,
	0xaa, 0x2c, 0x20, 0xe9, 0x26, 0xeb, 0x55, 0x1d, 0x6a, 0xc6, 0xa2, 0x1d, 0x9f, 0xfb, 0x00, 0x8a,
	0x1a, 0x9a, 0x47, 0x1c, 0x00, 0x89, 0x5c, 0x49, 0x1d, 0x95, 0xb4, 0xa7, 0x75, 0x0f, 0x55, 0x36,
	0x4e, 0x22, 0x63, 0x0e, 0x40, 0x4b, 0xf9, 0x6a, 0x06, 0xeb, 0x01, 0x11, 0xc8, 0x44, 0x80, 0xb8,
	0x29, 0x59, 0x54, 0x81, 0xa2, 0x66, 0x58, 0xaa, 0x66, 0x98, 0x7c, 0x2e, 0x42, 0xd3, 0xa6, 0xcc,
	0xed, 0xe2, 0x00, 0xb1, 0x13, 0xff, 0xc9, 0x42, 0x95, 0x3e, 0xa9, 0xbf, 0xda, 0x9e, 0x7d, 0x8b,
	0x03, 0xf4, 0x12, 0x0a, 0xec, 0x8a, 0xa0, 0x8f, 0x5f, 0xea, 0xc3, 0xf9, 0x50, 0x4a, 0xdc, 0xcd,
	0x1f, 0xa1, 0x14, 0x5f, 0x95, 0x55, 0xe4, 0xfd, 0x78, 0x2b, 0x75, 0x65, 0x4d, 0xd8, 0x5d, 0x72,
	0x39, 0xd1, 0x61, 0x42, 0x29, 0x31, 0x3f, 0x0e, 0xbf, 0x4c, 0xe6, 0xb1, 0xec, 0x82, 0xfe, 0x06,
	0x7b, 0x4b, 0xef, 0xef, 0x4a, 0xdd, 0xaf, 0xd2, 0x29, 0x2e, 0x51, 0x16, 0x7b, 0xc0, 0x25, 0xa9,
	0xe8, 0x27, 0xd8, 0xd1, 0x3c, 0x96, 0x0a, 0x83, 0x3a, 0xe8, 0xf3, 0x58, 0x69, 0xd9, 0x18, 0x3d,
	0xac, 0xcd, 0x73, 0x20, 0x2f, 0x62, 0xf1, 0xbf, 0x1c, 0xd4, 0x12, 0x20, 0xd4, 0x82, 0x8a, 0xe6,
	0x91, 0x71, 0x28, 0x39, 0x0e, 0x76, 0x50, 0x62, 0x42, 0xa6, 0xd8, 0xe8, 0x19, 0x70, 0x0c, 0x6b,
	0x84, 0xfe, 0x78, 0x3c, 0xf2, 0x6e, 0x57, 0xc3, 0xbf, 0x83, 0xda, 0x02, 0x7c, 0x9d, 0xf8, 0x29,
	0x39, 0x1a, 0xd9, 0x90, 0x71, 0x68, 0x0f, 0xef, 0xd6, 0xaa, 0xcf, 0x93, 0x61, 0xf8, 0x75, 0xf2,
	0xdf, 0x13, 0xf9, 0xe8, 0xf5, 0x1d, 0x60, 0x3b, 0xc4, 0x0e, 0x5a, 0xf2, 0x76, 0x5d, 0xc1, 0x92,
	0xb1, 0x8b, 0x37, 0x64, 0xbd, 0x84, 0xc6, 0xdc, 0x8b, 0xa4, 0xf6, 0x09, 0x86, 0x69, 0xea, 0xe6,
	0xae, 0xe2, 0xbf, 0x19, 0xa8, 0xb7, 0x7d, 0x2f, 0x0c, 0x7c, 0xd7, 0xc5, 0x41, 0x34, 0x5c, 0x50,
	0x0b, 0x80, 0x94, 0x9f, 0xcd, 0x49, 0x94, 0xa4, 0xa4, 0xcd, 0x8f, 0xa1, 0x28, 0x39, 0x0e, 0xfd,
	0x52, 0x5b, 0x59, 0xcb, 0x6f, 0xa0, 0x44, 0x34, 0xd7, 0x03, 0xbf, 0x05, 0x60, 0xdd, 0x59, 0x0b,
	0x15, 0x03, 0xe0, 0x8c, 0xd0, 0x0f, 0xec, 0x5b, 0x1c, 0x67, 0xfe, 0x0c, 0xaa, 0xac, 0x70, 0xd1,
	0xa7, 0x1b, 0x97, 0x2c, 0x41, 0xda, 0xeb, 0x1c, 0xaa, 0xac, 0x58, 0x11, 0x7c, 0x83, 0x8a, 0xfd,
	0x9f, 0x81, 0x5d, 0xd5, 0x1f, 0xda, 0x6e, 0xca, 0xf9, 0x07, 0x40, 0x8b, 0xce, 0x97, 0x33, 0xfa,
	0x65, 0x96, 0x12, 0x24, 0xb1, 0x74, 0x0e, 0x17, 0xc0, 0xc9, 0xfe, 0x3b, 0xcf, 0xf5, 0x6d, 0x67,
	0xe3, 0x2c, 0xd0, 0x19, 0x54, 0x74, 0xd5, 0x1f, 0xfe, 0xb1, 0x39, 0x43, 0x84, 0x9a, 0xde, 0xf7,
	0xdc, 0x4f, 0xe1, 0x88, 0x53, 0xd8, 0xef, 0x78, 0x21, 0x0e, 0xbc, 0x47, 0xa7, 0x7d, 0x0e, 0xe5,
	0x6b, 0x1c, 0xae, 0x50, 0x4a, 0x15, 0x1e, 0xb5, 0xa0, 0xdc, 0x9b, 0x86, 0x1b, 0x75, 0x65, 0xc0,
	0xfe, 0x15, 0xb8, 0x78, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x8c, 0x1a, 0x64, 0x22, 0x0c, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventManagerClient is the client API for EventManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventManagerClient interface {
	// 指定したイベントをlistenする。
	// [Listener] --> [Manager]
	Listen(ctx context.Context, in *EventListenerInfo, opts ...grpc.CallOption) (*ListenResult, error)
	// 指定したイベントをunlistenする。
	// [Listener] --> [Manager]
	Unlisten(ctx context.Context, in *EventListenerInfo, opts ...grpc.CallOption) (*UnlistenResult, error)
	// Listen状態の変化をlistenする。
	// [Deliverer] --> [Manager]
	ListenStatusChanges(ctx context.Context, in *EventDelivererInfo, opts ...grpc.CallOption) (*ListenStatusChangesResult, error)
	// Listen状態の変化をunlistenする。
	// [Deliverer] --> [Manager]
	UnlistenStatusChanges(ctx context.Context, in *EventDelivererInfo, opts ...grpc.CallOption) (*UnlistenStatusChangesResult, error)
}

type eventManagerClient struct {
	cc *grpc.ClientConn
}

func NewEventManagerClient(cc *grpc.ClientConn) EventManagerClient {
	return &eventManagerClient{cc}
}

func (c *eventManagerClient) Listen(ctx context.Context, in *EventListenerInfo, opts ...grpc.CallOption) (*ListenResult, error) {
	out := new(ListenResult)
	err := c.cc.Invoke(ctx, "/proto2.EventManager/Listen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventManagerClient) Unlisten(ctx context.Context, in *EventListenerInfo, opts ...grpc.CallOption) (*UnlistenResult, error) {
	out := new(UnlistenResult)
	err := c.cc.Invoke(ctx, "/proto2.EventManager/Unlisten", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventManagerClient) ListenStatusChanges(ctx context.Context, in *EventDelivererInfo, opts ...grpc.CallOption) (*ListenStatusChangesResult, error) {
	out := new(ListenStatusChangesResult)
	err := c.cc.Invoke(ctx, "/proto2.EventManager/ListenStatusChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventManagerClient) UnlistenStatusChanges(ctx context.Context, in *EventDelivererInfo, opts ...grpc.CallOption) (*UnlistenStatusChangesResult, error) {
	out := new(UnlistenStatusChangesResult)
	err := c.cc.Invoke(ctx, "/proto2.EventManager/UnlistenStatusChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventManagerServer is the server API for EventManager service.
type EventManagerServer interface {
	// 指定したイベントをlistenする。
	// [Listener] --> [Manager]
	Listen(context.Context, *EventListenerInfo) (*ListenResult, error)
	// 指定したイベントをunlistenする。
	// [Listener] --> [Manager]
	Unlisten(context.Context, *EventListenerInfo) (*UnlistenResult, error)
	// Listen状態の変化をlistenする。
	// [Deliverer] --> [Manager]
	ListenStatusChanges(context.Context, *EventDelivererInfo) (*ListenStatusChangesResult, error)
	// Listen状態の変化をunlistenする。
	// [Deliverer] --> [Manager]
	UnlistenStatusChanges(context.Context, *EventDelivererInfo) (*UnlistenStatusChangesResult, error)
}

func RegisterEventManagerServer(s *grpc.Server, srv EventManagerServer) {
	s.RegisterService(&_EventManager_serviceDesc, srv)
}

func _EventManager_Listen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventListenerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventManagerServer).Listen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.EventManager/Listen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventManagerServer).Listen(ctx, req.(*EventListenerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventManager_Unlisten_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventListenerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventManagerServer).Unlisten(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.EventManager/Unlisten",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventManagerServer).Unlisten(ctx, req.(*EventListenerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventManager_ListenStatusChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventDelivererInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventManagerServer).ListenStatusChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.EventManager/ListenStatusChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventManagerServer).ListenStatusChanges(ctx, req.(*EventDelivererInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventManager_UnlistenStatusChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventDelivererInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventManagerServer).UnlistenStatusChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.EventManager/UnlistenStatusChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventManagerServer).UnlistenStatusChanges(ctx, req.(*EventDelivererInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto2.EventManager",
	HandlerType: (*EventManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Listen",
			Handler:    _EventManager_Listen_Handler,
		},
		{
			MethodName: "Unlisten",
			Handler:    _EventManager_Unlisten_Handler,
		},
		{
			MethodName: "ListenStatusChanges",
			Handler:    _EventManager_ListenStatusChanges_Handler,
		},
		{
			MethodName: "UnlistenStatusChanges",
			Handler:    _EventManager_UnlistenStatusChanges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// EventDelivererClient is the client API for EventDeliverer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventDelivererClient interface {
	// listen状態が変化したときに呼び出される。
	// [Manager] --> [Deliverer]
	OnListenChanged(ctx context.Context, in *AllEventListenerInfo, opts ...grpc.CallOption) (*Empty, error)
}

type eventDelivererClient struct {
	cc *grpc.ClientConn
}

func NewEventDelivererClient(cc *grpc.ClientConn) EventDelivererClient {
	return &eventDelivererClient{cc}
}

func (c *eventDelivererClient) OnListenChanged(ctx context.Context, in *AllEventListenerInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.EventDeliverer/OnListenChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventDelivererServer is the server API for EventDeliverer service.
type EventDelivererServer interface {
	// listen状態が変化したときに呼び出される。
	// [Manager] --> [Deliverer]
	OnListenChanged(context.Context, *AllEventListenerInfo) (*Empty, error)
}

func RegisterEventDelivererServer(s *grpc.Server, srv EventDelivererServer) {
	s.RegisterService(&_EventDeliverer_serviceDesc, srv)
}

func _EventDeliverer_OnListenChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllEventListenerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventDelivererServer).OnListenChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.EventDeliverer/OnListenChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventDelivererServer).OnListenChanged(ctx, req.(*AllEventListenerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventDeliverer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto2.EventDeliverer",
	HandlerType: (*EventDelivererServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnListenChanged",
			Handler:    _EventDeliverer_OnListenChanged_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// EventListenerClient is the client API for EventListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventListenerClient interface {
	// イベントが発生したときに呼び出される。
	// [Deliverer] --> [Listener]
	OnNodeAdded(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error)
	OnNodeStopping(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error)
	OnNodeStopped(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error)
	OnNodeDetaching(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error)
	OnNodeDetached(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error)
	OnObjectCreated(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (*Empty, error)
	OnObjectDeleted(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (*Empty, error)
	OnObjectCacheCreated(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (*Empty, error)
	OnObjectCacheDeleted(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (*Empty, error)
}

type eventListenerClient struct {
	cc *grpc.ClientConn
}

func NewEventListenerClient(cc *grpc.ClientConn) EventListenerClient {
	return &eventListenerClient{cc}
}

func (c *eventListenerClient) OnNodeAdded(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.EventListener/OnNodeAdded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventListenerClient) OnNodeStopping(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.EventListener/OnNodeStopping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventListenerClient) OnNodeStopped(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.EventListener/OnNodeStopped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventListenerClient) OnNodeDetaching(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.EventListener/OnNodeDetaching", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventListenerClient) OnNodeDetached(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.EventListener/OnNodeDetached", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventListenerClient) OnObjectCreated(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.EventListener/OnObjectCreated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventListenerClient) OnObjectDeleted(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.EventListener/OnObjectDeleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventListenerClient) OnObjectCacheCreated(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.EventListener/OnObjectCacheCreated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventListenerClient) OnObjectCacheDeleted(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.EventListener/OnObjectCacheDeleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventListenerServer is the server API for EventListener service.
type EventListenerServer interface {
	// イベントが発生したときに呼び出される。
	// [Deliverer] --> [Listener]
	OnNodeAdded(context.Context, *Node) (*Empty, error)
	OnNodeStopping(context.Context, *Node) (*Empty, error)
	OnNodeStopped(context.Context, *Node) (*Empty, error)
	OnNodeDetaching(context.Context, *Node) (*Empty, error)
	OnNodeDetached(context.Context, *Node) (*Empty, error)
	OnObjectCreated(context.Context, *ObjectInfo) (*Empty, error)
	OnObjectDeleted(context.Context, *ObjectInfo) (*Empty, error)
	OnObjectCacheCreated(context.Context, *ObjectInfo) (*Empty, error)
	OnObjectCacheDeleted(context.Context, *ObjectInfo) (*Empty, error)
}

func RegisterEventListenerServer(s *grpc.Server, srv EventListenerServer) {
	s.RegisterService(&_EventListener_serviceDesc, srv)
}

func _EventListener_OnNodeAdded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).OnNodeAdded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.EventListener/OnNodeAdded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).OnNodeAdded(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventListener_OnNodeStopping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).OnNodeStopping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.EventListener/OnNodeStopping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).OnNodeStopping(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventListener_OnNodeStopped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).OnNodeStopped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.EventListener/OnNodeStopped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).OnNodeStopped(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventListener_OnNodeDetaching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).OnNodeDetaching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.EventListener/OnNodeDetaching",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).OnNodeDetaching(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventListener_OnNodeDetached_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).OnNodeDetached(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.EventListener/OnNodeDetached",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).OnNodeDetached(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventListener_OnObjectCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).OnObjectCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.EventListener/OnObjectCreated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).OnObjectCreated(ctx, req.(*ObjectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventListener_OnObjectDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).OnObjectDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.EventListener/OnObjectDeleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).OnObjectDeleted(ctx, req.(*ObjectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventListener_OnObjectCacheCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).OnObjectCacheCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.EventListener/OnObjectCacheCreated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).OnObjectCacheCreated(ctx, req.(*ObjectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventListener_OnObjectCacheDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).OnObjectCacheDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.EventListener/OnObjectCacheDeleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).OnObjectCacheDeleted(ctx, req.(*ObjectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventListener_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto2.EventListener",
	HandlerType: (*EventListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnNodeAdded",
			Handler:    _EventListener_OnNodeAdded_Handler,
		},
		{
			MethodName: "OnNodeStopping",
			Handler:    _EventListener_OnNodeStopping_Handler,
		},
		{
			MethodName: "OnNodeStopped",
			Handler:    _EventListener_OnNodeStopped_Handler,
		},
		{
			MethodName: "OnNodeDetaching",
			Handler:    _EventListener_OnNodeDetaching_Handler,
		},
		{
			MethodName: "OnNodeDetached",
			Handler:    _EventListener_OnNodeDetached_Handler,
		},
		{
			MethodName: "OnObjectCreated",
			Handler:    _EventListener_OnObjectCreated_Handler,
		},
		{
			MethodName: "OnObjectDeleted",
			Handler:    _EventListener_OnObjectDeleted_Handler,
		},
		{
			MethodName: "OnObjectCacheCreated",
			Handler:    _EventListener_OnObjectCacheCreated_Handler,
		},
		{
			MethodName: "OnObjectCacheDeleted",
			Handler:    _EventListener_OnObjectCacheDeleted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ControllerServiceClient is the client API for ControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerServiceClient interface {
	StopSystem(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	AddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error)
	StopNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error)
	DetachNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error)
}

type controllerServiceClient struct {
	cc *grpc.ClientConn
}

func NewControllerServiceClient(cc *grpc.ClientConn) ControllerServiceClient {
	return &controllerServiceClient{cc}
}

func (c *controllerServiceClient) StopSystem(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.ControllerService/StopSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) AddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.ControllerService/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) StopNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.ControllerService/StopNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) DetachNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.ControllerService/DetachNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServiceServer is the server API for ControllerService service.
type ControllerServiceServer interface {
	StopSystem(context.Context, *Empty) (*Empty, error)
	AddNode(context.Context, *Node) (*Empty, error)
	StopNode(context.Context, *Node) (*Empty, error)
	DetachNode(context.Context, *Node) (*Empty, error)
}

func RegisterControllerServiceServer(s *grpc.Server, srv ControllerServiceServer) {
	s.RegisterService(&_ControllerService_serviceDesc, srv)
}

func _ControllerService_StopSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).StopSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.ControllerService/StopSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).StopSystem(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.ControllerService/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).AddNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_StopNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).StopNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.ControllerService/StopNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).StopNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_DetachNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).DetachNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.ControllerService/DetachNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).DetachNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControllerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto2.ControllerService",
	HandlerType: (*ControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StopSystem",
			Handler:    _ControllerService_StopSystem_Handler,
		},
		{
			MethodName: "AddNode",
			Handler:    _ControllerService_AddNode_Handler,
		},
		{
			MethodName: "StopNode",
			Handler:    _ControllerService_StopNode_Handler,
		},
		{
			MethodName: "DetachNode",
			Handler:    _ControllerService_DetachNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// StorageServiceClient is the client API for StorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StorageServiceClient interface {
	CreateObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Empty, error)
	DeleteObject(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (*Empty, error)
}

type storageServiceClient struct {
	cc *grpc.ClientConn
}

func NewStorageServiceClient(cc *grpc.ClientConn) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) CreateObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.StorageService/CreateObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) DeleteObject(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.StorageService/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServiceServer is the server API for StorageService service.
type StorageServiceServer interface {
	CreateObject(context.Context, *Object) (*Empty, error)
	DeleteObject(context.Context, *ObjectInfo) (*Empty, error)
}

func RegisterStorageServiceServer(s *grpc.Server, srv StorageServiceServer) {
	s.RegisterService(&_StorageService_serviceDesc, srv)
}

func _StorageService_CreateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).CreateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.StorageService/CreateObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).CreateObject(ctx, req.(*Object))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.StorageService/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).DeleteObject(ctx, req.(*ObjectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _StorageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto2.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateObject",
			Handler:    _StorageService_CreateObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _StorageService_DeleteObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// LocalStorageServiceClient is the client API for LocalStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LocalStorageServiceClient interface {
	CreateObjectByPath(ctx context.Context, in *ObjectPath, opts ...grpc.CallOption) (*Empty, error)
	DownloadObject(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (*Empty, error)
	RLockObject(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (*Empty, error)
	RUnlockObject(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (*Empty, error)
}

type localStorageServiceClient struct {
	cc *grpc.ClientConn
}

func NewLocalStorageServiceClient(cc *grpc.ClientConn) LocalStorageServiceClient {
	return &localStorageServiceClient{cc}
}

func (c *localStorageServiceClient) CreateObjectByPath(ctx context.Context, in *ObjectPath, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.LocalStorageService/CreateObjectByPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localStorageServiceClient) DownloadObject(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.LocalStorageService/DownloadObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localStorageServiceClient) RLockObject(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.LocalStorageService/RLockObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localStorageServiceClient) RUnlockObject(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.LocalStorageService/RUnlockObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalStorageServiceServer is the server API for LocalStorageService service.
type LocalStorageServiceServer interface {
	CreateObjectByPath(context.Context, *ObjectPath) (*Empty, error)
	DownloadObject(context.Context, *ObjectInfo) (*Empty, error)
	RLockObject(context.Context, *ObjectInfo) (*Empty, error)
	RUnlockObject(context.Context, *ObjectInfo) (*Empty, error)
}

func RegisterLocalStorageServiceServer(s *grpc.Server, srv LocalStorageServiceServer) {
	s.RegisterService(&_LocalStorageService_serviceDesc, srv)
}

func _LocalStorageService_CreateObjectByPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalStorageServiceServer).CreateObjectByPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.LocalStorageService/CreateObjectByPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalStorageServiceServer).CreateObjectByPath(ctx, req.(*ObjectPath))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalStorageService_DownloadObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalStorageServiceServer).DownloadObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.LocalStorageService/DownloadObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalStorageServiceServer).DownloadObject(ctx, req.(*ObjectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalStorageService_RLockObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalStorageServiceServer).RLockObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.LocalStorageService/RLockObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalStorageServiceServer).RLockObject(ctx, req.(*ObjectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalStorageService_RUnlockObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalStorageServiceServer).RUnlockObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.LocalStorageService/RUnlockObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalStorageServiceServer).RUnlockObject(ctx, req.(*ObjectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _LocalStorageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto2.LocalStorageService",
	HandlerType: (*LocalStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateObjectByPath",
			Handler:    _LocalStorageService_CreateObjectByPath_Handler,
		},
		{
			MethodName: "DownloadObject",
			Handler:    _LocalStorageService_DownloadObject_Handler,
		},
		{
			MethodName: "RLockObject",
			Handler:    _LocalStorageService_RLockObject_Handler,
		},
		{
			MethodName: "RUnlockObject",
			Handler:    _LocalStorageService_RUnlockObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// InternalStorageServiceClient is the client API for InternalStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InternalStorageServiceClient interface {
	// TODO
	GetObject(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (*Object, error)
	PutObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Empty, error)
}

type internalStorageServiceClient struct {
	cc *grpc.ClientConn
}

func NewInternalStorageServiceClient(cc *grpc.ClientConn) InternalStorageServiceClient {
	return &internalStorageServiceClient{cc}
}

func (c *internalStorageServiceClient) GetObject(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := c.cc.Invoke(ctx, "/proto2.InternalStorageService/GetObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalStorageServiceClient) PutObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.InternalStorageService/PutObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalStorageServiceServer is the server API for InternalStorageService service.
type InternalStorageServiceServer interface {
	// TODO
	GetObject(context.Context, *ObjectInfo) (*Object, error)
	PutObject(context.Context, *Object) (*Empty, error)
}

func RegisterInternalStorageServiceServer(s *grpc.Server, srv InternalStorageServiceServer) {
	s.RegisterService(&_InternalStorageService_serviceDesc, srv)
}

func _InternalStorageService_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalStorageServiceServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.InternalStorageService/GetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalStorageServiceServer).GetObject(ctx, req.(*ObjectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalStorageService_PutObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalStorageServiceServer).PutObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.InternalStorageService/PutObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalStorageServiceServer).PutObject(ctx, req.(*Object))
	}
	return interceptor(ctx, in, info, handler)
}

var _InternalStorageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto2.InternalStorageService",
	HandlerType: (*InternalStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetObject",
			Handler:    _InternalStorageService_GetObject_Handler,
		},
		{
			MethodName: "PutObject",
			Handler:    _InternalStorageService_PutObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
