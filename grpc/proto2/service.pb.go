// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package proto2

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventType int32

const (
	EventType_ET_ALL                  EventType = 0
	EventType_ET_STATUS_CHANGED       EventType = 10
	EventType_ET_NODE_ADDED           EventType = 1
	EventType_ET_NODE_STOPPING        EventType = 2
	EventType_ET_NODE_STOPPED         EventType = 3
	EventType_ET_NODE_DETACHING       EventType = 4
	EventType_ET_NODE_DETACHED        EventType = 5
	EventType_ET_OBJECT_CREATED       EventType = 6
	EventType_ET_OBJECT_DELETED       EventType = 7
	EventType_ET_OBJECT_CACHE_CREATED EventType = 8
	EventType_ET_OBJECT_CACHE_DELETED EventType = 9
)

var EventType_name = map[int32]string{
	0:  "ET_ALL",
	10: "ET_STATUS_CHANGED",
	1:  "ET_NODE_ADDED",
	2:  "ET_NODE_STOPPING",
	3:  "ET_NODE_STOPPED",
	4:  "ET_NODE_DETACHING",
	5:  "ET_NODE_DETACHED",
	6:  "ET_OBJECT_CREATED",
	7:  "ET_OBJECT_DELETED",
	8:  "ET_OBJECT_CACHE_CREATED",
	9:  "ET_OBJECT_CACHE_DELETED",
}

var EventType_value = map[string]int32{
	"ET_ALL":                  0,
	"ET_STATUS_CHANGED":       10,
	"ET_NODE_ADDED":           1,
	"ET_NODE_STOPPING":        2,
	"ET_NODE_STOPPED":         3,
	"ET_NODE_DETACHING":       4,
	"ET_NODE_DETACHED":        5,
	"ET_OBJECT_CREATED":       6,
	"ET_OBJECT_DELETED":       7,
	"ET_OBJECT_CACHE_CREATED": 8,
	"ET_OBJECT_CACHE_DELETED": 9,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

// ==== State Transition Diagram ====
//
// [SS_UNAVAILABLE]
//       |
// +-----|---------------+
// |     V               |
// |  [SS_INIT_PHASE_0]  |
// |     |               |
// |     V               |
// |  [SS_INIT_PHASE_1]  |
// |     |               |
// |     V               |
// |  [SS_INIT_PHASE_2]  |
// |     |               |
// +-----|---------------+
//       |
// +-----|-------------------------+
// |     V                         |
// |  [SS_OPERATING_RW] <-------+  |
// |     |                      |  |
// |     V                      |  |
// |  [SS_OPERATING_RW_TO_RO]   |  |
// |     |                      |  |
// |     V                      |  |
// |  [SS_OPERATING_RO] --------+  |
// |     |                         |
// +-----|-------------------------+
//       V
// [SHUTDOWN]
type SystemStatus int32

const (
	SystemStatus_SS_UNAVAILABLE SystemStatus = 0
	// launcherが起動した状態。
	SystemStatus_SS_INIT_PHASE_0 SystemStatus = 10
	// 各サブシステムが起動中の状態。
	SystemStatus_SS_INIT_PHASE_1 SystemStatus = 11
	// 各サブシステムが起動完了した状態。
	SystemStatus_SS_INIT_PHASE_2 SystemStatus = 12
	// 通常運用の状態。
	SystemStatus_SS_OPERATING_RW SystemStatus = 20
	// Read Onlyモードに移行中の状態
	SystemStatus_SS_OPERATING_RW_TO_RO SystemStatus = 21
	// Read Onlyモードで運用中。
	SystemStatus_SS_OPERATING_RO SystemStatus = 22
	// 各サブシステムのプロセスを終了している状態。
	SystemStatus_SS_SHUTDOWN SystemStatus = 30
)

var SystemStatus_name = map[int32]string{
	0:  "SS_UNAVAILABLE",
	10: "SS_INIT_PHASE_0",
	11: "SS_INIT_PHASE_1",
	12: "SS_INIT_PHASE_2",
	20: "SS_OPERATING_RW",
	21: "SS_OPERATING_RW_TO_RO",
	22: "SS_OPERATING_RO",
	30: "SS_SHUTDOWN",
}

var SystemStatus_value = map[string]int32{
	"SS_UNAVAILABLE":        0,
	"SS_INIT_PHASE_0":       10,
	"SS_INIT_PHASE_1":       11,
	"SS_INIT_PHASE_2":       12,
	"SS_OPERATING_RW":       20,
	"SS_OPERATING_RW_TO_RO": 21,
	"SS_OPERATING_RO":       22,
	"SS_SHUTDOWN":           30,
}

func (x SystemStatus) String() string {
	return proto.EnumName(SystemStatus_name, int32(x))
}

func (SystemStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

// ==== State Transition Diagram ====
//
//       [SSS_UNKNOWN]
//          |
//          v
//   +-- [SSS_STOPPED]  <----+
//   |      |                |
//   |      v                |
//   +-- [SSS_STARTING]      |
//   |      |                |
//   |      v                |
//   +-- [SSS_STARTED]       |
//   |      |                |
//   |      v                |
//   +-- [SSS_STOPPING]  ----+
//   |
//   V
// [Failed]
type SubServiceStatus int32

const (
	SubServiceStatus_SSS_UNKNOWN   SubServiceStatus = 0
	SubServiceStatus_SSS_STOPPED   SubServiceStatus = 1
	SubServiceStatus_SSS_STARTING  SubServiceStatus = 2
	SubServiceStatus_SSS_OPERATING SubServiceStatus = 3
	SubServiceStatus_SSS_STOPPING  SubServiceStatus = 4
	SubServiceStatus_SSS_FAILED    SubServiceStatus = 5
)

var SubServiceStatus_name = map[int32]string{
	0: "SSS_UNKNOWN",
	1: "SSS_STOPPED",
	2: "SSS_STARTING",
	3: "SSS_OPERATING",
	4: "SSS_STOPPING",
	5: "SSS_FAILED",
}

var SubServiceStatus_value = map[string]int32{
	"SSS_UNKNOWN":   0,
	"SSS_STOPPED":   1,
	"SSS_STARTING":  2,
	"SSS_OPERATING": 3,
	"SSS_STOPPING":  4,
	"SSS_FAILED":    5,
}

func (x SubServiceStatus) String() string {
	return proto.EnumName(SubServiceStatus_name, int32(x))
}

func (SubServiceStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

// ==== State Transition Diagram ====
//
// [OS_UNKNOWN]
//    |
//    v
// [OS_CREATING]
//    |  +------------------+
//    v  v                  |
// [OS_CREATED]  ----->  [OS_LOST]
//    |                     |
//    v                     |
// [OS_DELETING] <-----------+
//    |
//    v
// [OS_DELETED]
type ObjectStatus int32

const (
	ObjectStatus_OS_UNKNOWN  ObjectStatus = 0
	ObjectStatus_OS_CREATING ObjectStatus = 1
	ObjectStatus_OS_CREATED  ObjectStatus = 2
	ObjectStatus_OS_LOST     ObjectStatus = 3
	ObjectStatus_OS_DELETING ObjectStatus = 4
	ObjectStatus_OS_DELETED  ObjectStatus = 5
)

var ObjectStatus_name = map[int32]string{
	0: "OS_UNKNOWN",
	1: "OS_CREATING",
	2: "OS_CREATED",
	3: "OS_LOST",
	4: "OS_DELETING",
	5: "OS_DELETED",
}

var ObjectStatus_value = map[string]int32{
	"OS_UNKNOWN":  0,
	"OS_CREATING": 1,
	"OS_CREATED":  2,
	"OS_LOST":     3,
	"OS_DELETING": 4,
	"OS_DELETED":  5,
}

func (x ObjectStatus) String() string {
	return proto.EnumName(ObjectStatus_name, int32(x))
}

func (ObjectStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{3}
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Node struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Group                []string `protobuf:"bytes,2,rep,name=group,proto3" json:"group,omitempty"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Node) GetGroup() []string {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *Node) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ObjectInfo struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version              uint64   `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObjectInfo) Reset()         { *m = ObjectInfo{} }
func (m *ObjectInfo) String() string { return proto.CompactTextString(m) }
func (*ObjectInfo) ProtoMessage()    {}
func (*ObjectInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

func (m *ObjectInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectInfo.Unmarshal(m, b)
}
func (m *ObjectInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectInfo.Marshal(b, m, deterministic)
}
func (m *ObjectInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectInfo.Merge(m, src)
}
func (m *ObjectInfo) XXX_Size() int {
	return xxx_messageInfo_ObjectInfo.Size(m)
}
func (m *ObjectInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectInfo proto.InternalMessageInfo

func (m *ObjectInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ObjectInfo) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type Object struct {
	Info                 *ObjectInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Body                 []byte      `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Object) Reset()         { *m = Object{} }
func (m *Object) String() string { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()    {}
func (*Object) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{3}
}

func (m *Object) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Object.Unmarshal(m, b)
}
func (m *Object) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Object.Marshal(b, m, deterministic)
}
func (m *Object) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Object.Merge(m, src)
}
func (m *Object) XXX_Size() int {
	return xxx_messageInfo_Object.Size(m)
}
func (m *Object) XXX_DiscardUnknown() {
	xxx_messageInfo_Object.DiscardUnknown(m)
}

var xxx_messageInfo_Object proto.InternalMessageInfo

func (m *Object) GetInfo() *ObjectInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *Object) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type ObjectCache struct {
	Obj                  *ObjectInfo `protobuf:"bytes,1,opt,name=obj,proto3" json:"obj,omitempty"`
	Node                 *Node       `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ObjectCache) Reset()         { *m = ObjectCache{} }
func (m *ObjectCache) String() string { return proto.CompactTextString(m) }
func (*ObjectCache) ProtoMessage()    {}
func (*ObjectCache) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{4}
}

func (m *ObjectCache) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectCache.Unmarshal(m, b)
}
func (m *ObjectCache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectCache.Marshal(b, m, deterministic)
}
func (m *ObjectCache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectCache.Merge(m, src)
}
func (m *ObjectCache) XXX_Size() int {
	return xxx_messageInfo_ObjectCache.Size(m)
}
func (m *ObjectCache) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectCache.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectCache proto.InternalMessageInfo

func (m *ObjectCache) GetObj() *ObjectInfo {
	if m != nil {
		return m.Obj
	}
	return nil
}

func (m *ObjectCache) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type ObjectPath struct {
	Obj                  *ObjectInfo `protobuf:"bytes,1,opt,name=obj,proto3" json:"obj,omitempty"`
	Path                 string      `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ObjectPath) Reset()         { *m = ObjectPath{} }
func (m *ObjectPath) String() string { return proto.CompactTextString(m) }
func (*ObjectPath) ProtoMessage()    {}
func (*ObjectPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{5}
}

func (m *ObjectPath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectPath.Unmarshal(m, b)
}
func (m *ObjectPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectPath.Marshal(b, m, deterministic)
}
func (m *ObjectPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectPath.Merge(m, src)
}
func (m *ObjectPath) XXX_Size() int {
	return xxx_messageInfo_ObjectPath.Size(m)
}
func (m *ObjectPath) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectPath.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectPath proto.InternalMessageInfo

func (m *ObjectPath) GetObj() *ObjectInfo {
	if m != nil {
		return m.Obj
	}
	return nil
}

func (m *ObjectPath) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type Status struct {
	Writable             bool         `protobuf:"varint,1,opt,name=writable,proto3" json:"writable,omitempty"`
	RunLevel             SystemStatus `protobuf:"varint,2,opt,name=runLevel,proto3,enum=proto2.SystemStatus" json:"runLevel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{6}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetWritable() bool {
	if m != nil {
		return m.Writable
	}
	return false
}

func (m *Status) GetRunLevel() SystemStatus {
	if m != nil {
		return m.RunLevel
	}
	return SystemStatus_SS_UNAVAILABLE
}

type EventListener struct {
	Node                 *Node     `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Type                 EventType `protobuf:"varint,2,opt,name=type,proto3,enum=proto2.EventType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *EventListener) Reset()         { *m = EventListener{} }
func (m *EventListener) String() string { return proto.CompactTextString(m) }
func (*EventListener) ProtoMessage()    {}
func (*EventListener) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{7}
}

func (m *EventListener) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventListener.Unmarshal(m, b)
}
func (m *EventListener) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventListener.Marshal(b, m, deterministic)
}
func (m *EventListener) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventListener.Merge(m, src)
}
func (m *EventListener) XXX_Size() int {
	return xxx_messageInfo_EventListener.Size(m)
}
func (m *EventListener) XXX_DiscardUnknown() {
	xxx_messageInfo_EventListener.DiscardUnknown(m)
}

var xxx_messageInfo_EventListener proto.InternalMessageInfo

func (m *EventListener) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *EventListener) GetType() EventType {
	if m != nil {
		return m.Type
	}
	return EventType_ET_ALL
}

type ListenResult struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListenResult) Reset()         { *m = ListenResult{} }
func (m *ListenResult) String() string { return proto.CompactTextString(m) }
func (*ListenResult) ProtoMessage()    {}
func (*ListenResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{8}
}

func (m *ListenResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenResult.Unmarshal(m, b)
}
func (m *ListenResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenResult.Marshal(b, m, deterministic)
}
func (m *ListenResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenResult.Merge(m, src)
}
func (m *ListenResult) XXX_Size() int {
	return xxx_messageInfo_ListenResult.Size(m)
}
func (m *ListenResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenResult.DiscardUnknown(m)
}

var xxx_messageInfo_ListenResult proto.InternalMessageInfo

func (m *ListenResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type UnlistenResult struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnlistenResult) Reset()         { *m = UnlistenResult{} }
func (m *UnlistenResult) String() string { return proto.CompactTextString(m) }
func (*UnlistenResult) ProtoMessage()    {}
func (*UnlistenResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{9}
}

func (m *UnlistenResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnlistenResult.Unmarshal(m, b)
}
func (m *UnlistenResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnlistenResult.Marshal(b, m, deterministic)
}
func (m *UnlistenResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlistenResult.Merge(m, src)
}
func (m *UnlistenResult) XXX_Size() int {
	return xxx_messageInfo_UnlistenResult.Size(m)
}
func (m *UnlistenResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlistenResult.DiscardUnknown(m)
}

var xxx_messageInfo_UnlistenResult proto.InternalMessageInfo

func (m *UnlistenResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterEnum("proto2.EventType", EventType_name, EventType_value)
	proto.RegisterEnum("proto2.SystemStatus", SystemStatus_name, SystemStatus_value)
	proto.RegisterEnum("proto2.SubServiceStatus", SubServiceStatus_name, SubServiceStatus_value)
	proto.RegisterEnum("proto2.ObjectStatus", ObjectStatus_name, ObjectStatus_value)
	proto.RegisterType((*Empty)(nil), "proto2.Empty")
	proto.RegisterType((*Node)(nil), "proto2.Node")
	proto.RegisterType((*ObjectInfo)(nil), "proto2.ObjectInfo")
	proto.RegisterType((*Object)(nil), "proto2.Object")
	proto.RegisterType((*ObjectCache)(nil), "proto2.ObjectCache")
	proto.RegisterType((*ObjectPath)(nil), "proto2.ObjectPath")
	proto.RegisterType((*Status)(nil), "proto2.Status")
	proto.RegisterType((*EventListener)(nil), "proto2.EventListener")
	proto.RegisterType((*ListenResult)(nil), "proto2.ListenResult")
	proto.RegisterType((*UnlistenResult)(nil), "proto2.UnlistenResult")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 1023 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdb, 0x6e, 0xe2, 0x46,
	0x18, 0x8e, 0x81, 0x70, 0xf8, 0x39, 0xc4, 0xf9, 0x37, 0x49, 0xe9, 0x56, 0xaa, 0x22, 0xb4, 0x4d,
	0x29, 0xaa, 0x92, 0xd4, 0xdb, 0x6e, 0xb5, 0xda, 0x2b, 0x07, 0x3b, 0x09, 0xad, 0x8b, 0x91, 0xc7,
	0xec, 0xf6, 0xce, 0x32, 0x78, 0x36, 0x61, 0xeb, 0xd8, 0xc8, 0x0c, 0xac, 0x50, 0xaf, 0xfa, 0x24,
	0x7d, 0x8c, 0x5e, 0xf4, 0xa9, 0xfa, 0x06, 0xd5, 0x78, 0x6c, 0x96, 0xc3, 0x26, 0x24, 0x57, 0x78,
	0xbe, 0xf9, 0x0e, 0x33, 0xf3, 0xf3, 0x8f, 0x0d, 0xd5, 0x09, 0x8d, 0x66, 0xa3, 0x21, 0x3d, 0x1d,
	0x47, 0x21, 0x0b, 0x31, 0x1f, 0xff, 0x28, 0x8d, 0x02, 0xec, 0xea, 0x77, 0x63, 0x36, 0x6f, 0x5c,
	0x42, 0xae, 0x1b, 0x7a, 0x14, 0x6b, 0x90, 0x19, 0x79, 0x75, 0xe9, 0x58, 0x6a, 0xe6, 0xac, 0xcc,
	0xc8, 0xc3, 0x03, 0xd8, 0xbd, 0x89, 0xc2, 0xe9, 0xb8, 0x9e, 0x39, 0xce, 0x36, 0x4b, 0x96, 0x18,
	0x60, 0x1d, 0x0a, 0xae, 0xe7, 0x45, 0x74, 0x32, 0xa9, 0x67, 0x8f, 0xa5, 0x66, 0xc9, 0x4a, 0x87,
	0x8d, 0x57, 0x00, 0xe6, 0xe0, 0x03, 0x1d, 0xb2, 0x4e, 0xf0, 0x3e, 0x5c, 0x72, 0x2b, 0xc5, 0x6e,
	0x75, 0x28, 0xcc, 0x68, 0x34, 0x19, 0x85, 0x41, 0x3d, 0x13, 0x47, 0xa4, 0xc3, 0x86, 0x06, 0x79,
	0xa1, 0xc3, 0x13, 0xc8, 0x8d, 0x82, 0xf7, 0x61, 0xac, 0x2a, 0x2b, 0x28, 0x16, 0xac, 0x9c, 0x7e,
	0x72, 0xb5, 0xe2, 0x79, 0x44, 0xc8, 0x0d, 0x42, 0x6f, 0x1e, 0x1b, 0x55, 0xac, 0xf8, 0xb9, 0xd1,
	0x87, 0xb2, 0xe0, 0xb5, 0xdd, 0xe1, 0x2d, 0xc5, 0x17, 0x90, 0x0d, 0x07, 0x1f, 0x1e, 0x70, 0xe2,
	0xd3, 0x78, 0x0c, 0xb9, 0x20, 0xf4, 0x68, 0x6c, 0x54, 0x56, 0x2a, 0x29, 0x8d, 0x1f, 0x87, 0x15,
	0xcf, 0x34, 0x2e, 0xd3, 0x4d, 0xf5, 0x5c, 0x76, 0xfb, 0x48, 0x57, 0x84, 0xdc, 0xd8, 0x65, 0xb7,
	0xb1, 0x6b, 0xc9, 0x8a, 0x9f, 0x1b, 0x6f, 0x21, 0x4f, 0x98, 0xcb, 0xa6, 0x13, 0x7c, 0x0e, 0xc5,
	0x8f, 0xd1, 0x88, 0xb9, 0x03, 0x9f, 0xc6, 0x46, 0x45, 0x6b, 0x31, 0xc6, 0x73, 0x28, 0x46, 0xd3,
	0xc0, 0xa0, 0x33, 0xea, 0xc7, 0xea, 0x9a, 0x72, 0x90, 0x86, 0x90, 0xf9, 0x84, 0xd1, 0x3b, 0xe1,
	0x61, 0x2d, 0x58, 0x8d, 0xdf, 0xa1, 0xaa, 0xcf, 0x68, 0xc0, 0x8c, 0xd1, 0x84, 0xd1, 0x80, 0x46,
	0x8b, 0x2d, 0x49, 0xf7, 0x6d, 0x09, 0xbf, 0x81, 0x1c, 0x9b, 0x8f, 0x69, 0x12, 0xb0, 0x9f, 0x32,
	0x62, 0x1b, 0x7b, 0x3e, 0xa6, 0x56, 0x3c, 0xdd, 0x78, 0x01, 0x15, 0x61, 0x6a, 0xd1, 0xc9, 0xd4,
	0x67, 0xfc, 0xef, 0x40, 0xa3, 0x28, 0x8c, 0x92, 0x9a, 0x8a, 0x41, 0xe3, 0x04, 0x6a, 0xfd, 0xc0,
	0xdf, 0xca, 0x6b, 0xfd, 0x95, 0x81, 0xd2, 0x22, 0x01, 0x01, 0xf2, 0xba, 0xed, 0xa8, 0x86, 0x21,
	0xef, 0xe0, 0x21, 0xec, 0xeb, 0xb6, 0x43, 0x6c, 0xd5, 0xee, 0x13, 0xa7, 0x7d, 0xad, 0x76, 0xaf,
	0x74, 0x4d, 0x06, 0xdc, 0x87, 0xaa, 0x6e, 0x3b, 0x5d, 0x53, 0xd3, 0x1d, 0x55, 0xd3, 0x74, 0x4d,
	0x96, 0xf0, 0x00, 0xe4, 0x14, 0x22, 0xb6, 0xd9, 0xeb, 0x75, 0xba, 0x57, 0x72, 0x06, 0x9f, 0xc1,
	0xde, 0x0a, 0xaa, 0x6b, 0x72, 0x36, 0x31, 0x8d, 0x41, 0x4d, 0xb7, 0xd5, 0xf6, 0x35, 0xe7, 0xe6,
	0x96, 0x1d, 0x04, 0xac, 0x6b, 0xf2, 0x6e, 0x42, 0x36, 0x2f, 0x7e, 0xd1, 0xdb, 0xb6, 0xd3, 0xb6,
	0x74, 0xd5, 0xd6, 0x35, 0x39, 0xbf, 0x0a, 0x6b, 0xba, 0xa1, 0x73, 0xb8, 0x80, 0x5f, 0xc1, 0x17,
	0x4b, 0x6c, 0xee, 0xb1, 0xd0, 0x14, 0x3f, 0x37, 0x99, 0x2a, 0x4b, 0xad, 0x7f, 0x24, 0xa8, 0x2c,
	0x97, 0x11, 0x11, 0x6a, 0x84, 0x38, 0xfd, 0xae, 0xfa, 0x56, 0xed, 0x18, 0xea, 0x85, 0xa1, 0xcb,
	0x3b, 0x7c, 0x3b, 0x84, 0x38, 0x9d, 0x6e, 0xc7, 0x76, 0x7a, 0xd7, 0x2a, 0xd1, 0x9d, 0x73, 0x19,
	0x36, 0xc1, 0x1f, 0xe4, 0xf2, 0x26, 0xa8, 0xc8, 0x95, 0x04, 0x34, 0x7b, 0xba, 0xa5, 0xda, 0x9d,
	0xee, 0x95, 0x63, 0xbd, 0x93, 0x0f, 0xf0, 0x4b, 0x38, 0x5c, 0x03, 0x1d, 0xdb, 0x74, 0x2c, 0x53,
	0x3e, 0xdc, 0xe4, 0x9b, 0xf2, 0x11, 0xee, 0x41, 0x99, 0x10, 0x87, 0x5c, 0xf7, 0x6d, 0xcd, 0x7c,
	0xd7, 0x95, 0xbf, 0x6e, 0xfd, 0x09, 0x32, 0x99, 0x0e, 0x88, 0xb8, 0x47, 0x92, 0xc5, 0xc7, 0x24,
	0xbe, 0xfa, 0x5f, 0xbb, 0x9c, 0xb4, 0x93, 0x02, 0x69, 0x11, 0x24, 0x94, 0xa1, 0x22, 0x00, 0xd5,
	0xb2, 0x45, 0xad, 0xf6, 0xa1, 0x4a, 0x96, 0xe3, 0xe4, 0xec, 0x27, 0x52, 0x52, 0xd0, 0x1c, 0xd6,
	0x00, 0x38, 0x72, 0xa9, 0x76, 0x0c, 0x5e, 0x9e, 0xd6, 0x1d, 0x54, 0x44, 0x87, 0x25, 0xc1, 0x35,
	0x00, 0x73, 0x2d, 0xd7, 0x24, 0xa2, 0x06, 0xdc, 0x40, 0x4a, 0x08, 0x69, 0x51, 0x32, 0x58, 0x86,
	0x82, 0x49, 0x1c, 0xc3, 0x24, 0xb6, 0x9c, 0x4d, 0xd8, 0x71, 0x51, 0x16, 0x71, 0x29, 0xc0, 0xe3,
	0x94, 0xbf, 0x77, 0x41, 0xfe, 0x8d, 0x4e, 0x26, 0xee, 0x0d, 0xd5, 0xa8, 0x3f, 0x9a, 0xd1, 0x88,
	0x46, 0xf8, 0x33, 0xe4, 0x45, 0x33, 0xe0, 0xe1, 0x4a, 0xbf, 0xa4, 0x6d, 0xf7, 0x7c, 0xd1, 0xa7,
	0xcb, 0x3d, 0xd3, 0x94, 0xf0, 0x0d, 0x14, 0xd3, 0xfe, 0xb8, 0x4f, 0x7a, 0x94, 0xc2, 0xab, 0x8d,
	0xd4, 0x94, 0xf0, 0x35, 0xec, 0x99, 0x81, 0xe0, 0xb5, 0x6f, 0xdd, 0xe0, 0x86, 0x7a, 0xf7, 0x79,
	0x54, 0x17, 0x30, 0xbf, 0xd2, 0x9b, 0x12, 0x7e, 0x0f, 0x65, 0x33, 0xe0, 0x4d, 0xaf, 0x7a, 0x1e,
	0xf5, 0x70, 0xe5, 0x1e, 0xd8, 0x64, 0x9f, 0x41, 0x4d, 0xb0, 0x09, 0x0b, 0xc7, 0xe3, 0x51, 0x70,
	0xb3, 0x4d, 0x70, 0x0a, 0xd5, 0x25, 0xc1, 0xf6, 0x80, 0x73, 0xbe, 0x13, 0x3e, 0xa5, 0x51, 0xe6,
	0x0e, 0x6f, 0x1f, 0x91, 0xb0, 0x58, 0x92, 0x50, 0x6c, 0x8f, 0x78, 0xc5, 0x23, 0x92, 0x57, 0x40,
	0x44, 0x5d, 0x46, 0x3d, 0xfc, 0xcc, 0x0d, 0xfd, 0xa0, 0x4e, 0xa3, 0x3e, 0x7d, 0xb4, 0xee, 0x0d,
	0x1c, 0x2c, 0xf2, 0xf8, 0x02, 0x9f, 0x14, 0xba, 0x2e, 0x7e, 0x4a, 0xb2, 0xf2, 0xaf, 0x04, 0xfb,
	0xed, 0x30, 0x60, 0x51, 0xe8, 0xfb, 0x34, 0x4a, 0xba, 0x12, 0x5b, 0x00, 0xbc, 0x18, 0xe2, 0x82,
	0xc1, 0x55, 0xd1, 0x9a, 0x07, 0x9e, 0x40, 0x41, 0xf5, 0xbc, 0xf8, 0xad, 0xff, 0xd0, 0xa9, 0xe2,
	0xb7, 0x50, 0xe4, 0x9e, 0xdb, 0x89, 0xdf, 0x01, 0x88, 0x3a, 0x6d, 0xa5, 0x2a, 0x33, 0xa8, 0x11,
	0x16, 0x46, 0xee, 0x0d, 0x4d, 0x57, 0x7e, 0x06, 0x15, 0x71, 0x78, 0xc9, 0x67, 0x40, 0x6d, 0xf5,
	0x10, 0x36, 0x4f, 0xef, 0x25, 0x54, 0xc4, 0x81, 0x25, 0x82, 0x47, 0x9d, 0xda, 0x7f, 0x12, 0x3c,
	0x33, 0xc2, 0xa1, 0xeb, 0xaf, 0xa5, 0xbf, 0x06, 0x5c, 0x4e, 0xbf, 0x98, 0xc7, 0x6f, 0xfa, 0x35,
	0x4b, 0x8e, 0x6d, 0xae, 0xe3, 0x27, 0xa8, 0x69, 0xe1, 0xc7, 0xc0, 0x0f, 0x5d, 0xef, 0x09, 0x2b,
	0x41, 0x05, 0xca, 0x96, 0x11, 0x0e, 0xff, 0x78, 0x8a, 0xe6, 0x47, 0xa8, 0x5a, 0xfd, 0xc0, 0x7f,
	0x9a, 0x4a, 0x99, 0xc2, 0x51, 0x27, 0x60, 0x34, 0x0a, 0x36, 0x76, 0x7d, 0x06, 0xa5, 0x2b, 0xca,
	0x1e, 0xf0, 0x5a, 0x2b, 0x02, 0xb6, 0xa0, 0xd4, 0x9b, 0xb2, 0x47, 0x55, 0x68, 0x20, 0x3e, 0x31,
	0x5f, 0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x26, 0xa4, 0xaf, 0x66, 0x7a, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessageDelivererClient is the client API for MessageDeliverer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageDelivererClient interface {
	// 複数個のlistenとunlistenを一括でやる。
	Listen(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_ListenClient, error)
	Unlisten(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_UnlistenClient, error)
	OnListenChanged(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_OnListenChangedClient, error)
	OnNodeAdded(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_OnNodeAddedClient, error)
	OnNodeStopping(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_OnNodeStoppingClient, error)
	OnNodeStopped(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_OnNodeStoppedClient, error)
	OnNodeDetaching(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_OnNodeDetachingClient, error)
	OnNodeDetached(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_OnNodeDetachedClient, error)
	OnObjectCreated(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_OnObjectCreatedClient, error)
	OnObjectDeleted(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_OnObjectDeletedClient, error)
	OnObjectCacheCreated(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_OnObjectCacheCreatedClient, error)
	OnObjectCacheDeleted(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_OnObjectCacheDeletedClient, error)
}

type messageDelivererClient struct {
	cc *grpc.ClientConn
}

func NewMessageDelivererClient(cc *grpc.ClientConn) MessageDelivererClient {
	return &messageDelivererClient{cc}
}

func (c *messageDelivererClient) Listen(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageDeliverer_serviceDesc.Streams[0], "/proto2.MessageDeliverer/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageDelivererListenClient{stream}
	return x, nil
}

type MessageDeliverer_ListenClient interface {
	Send(*EventListener) error
	CloseAndRecv() (*ListenResult, error)
	grpc.ClientStream
}

type messageDelivererListenClient struct {
	grpc.ClientStream
}

func (x *messageDelivererListenClient) Send(m *EventListener) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageDelivererListenClient) CloseAndRecv() (*ListenResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ListenResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageDelivererClient) Unlisten(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_UnlistenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageDeliverer_serviceDesc.Streams[1], "/proto2.MessageDeliverer/Unlisten", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageDelivererUnlistenClient{stream}
	return x, nil
}

type MessageDeliverer_UnlistenClient interface {
	Send(*EventListener) error
	CloseAndRecv() (*UnlistenResult, error)
	grpc.ClientStream
}

type messageDelivererUnlistenClient struct {
	grpc.ClientStream
}

func (x *messageDelivererUnlistenClient) Send(m *EventListener) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageDelivererUnlistenClient) CloseAndRecv() (*UnlistenResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UnlistenResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageDelivererClient) OnListenChanged(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_OnListenChangedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageDeliverer_serviceDesc.Streams[2], "/proto2.MessageDeliverer/OnListenChanged", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageDelivererOnListenChangedClient{stream}
	return x, nil
}

type MessageDeliverer_OnListenChangedClient interface {
	Send(*EventListener) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type messageDelivererOnListenChangedClient struct {
	grpc.ClientStream
}

func (x *messageDelivererOnListenChangedClient) Send(m *EventListener) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageDelivererOnListenChangedClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageDelivererClient) OnNodeAdded(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_OnNodeAddedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageDeliverer_serviceDesc.Streams[3], "/proto2.MessageDeliverer/OnNodeAdded", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageDelivererOnNodeAddedClient{stream}
	return x, nil
}

type MessageDeliverer_OnNodeAddedClient interface {
	Send(*Node) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type messageDelivererOnNodeAddedClient struct {
	grpc.ClientStream
}

func (x *messageDelivererOnNodeAddedClient) Send(m *Node) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageDelivererOnNodeAddedClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageDelivererClient) OnNodeStopping(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_OnNodeStoppingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageDeliverer_serviceDesc.Streams[4], "/proto2.MessageDeliverer/OnNodeStopping", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageDelivererOnNodeStoppingClient{stream}
	return x, nil
}

type MessageDeliverer_OnNodeStoppingClient interface {
	Send(*Node) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type messageDelivererOnNodeStoppingClient struct {
	grpc.ClientStream
}

func (x *messageDelivererOnNodeStoppingClient) Send(m *Node) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageDelivererOnNodeStoppingClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageDelivererClient) OnNodeStopped(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_OnNodeStoppedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageDeliverer_serviceDesc.Streams[5], "/proto2.MessageDeliverer/OnNodeStopped", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageDelivererOnNodeStoppedClient{stream}
	return x, nil
}

type MessageDeliverer_OnNodeStoppedClient interface {
	Send(*Node) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type messageDelivererOnNodeStoppedClient struct {
	grpc.ClientStream
}

func (x *messageDelivererOnNodeStoppedClient) Send(m *Node) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageDelivererOnNodeStoppedClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageDelivererClient) OnNodeDetaching(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_OnNodeDetachingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageDeliverer_serviceDesc.Streams[6], "/proto2.MessageDeliverer/OnNodeDetaching", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageDelivererOnNodeDetachingClient{stream}
	return x, nil
}

type MessageDeliverer_OnNodeDetachingClient interface {
	Send(*Node) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type messageDelivererOnNodeDetachingClient struct {
	grpc.ClientStream
}

func (x *messageDelivererOnNodeDetachingClient) Send(m *Node) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageDelivererOnNodeDetachingClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageDelivererClient) OnNodeDetached(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_OnNodeDetachedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageDeliverer_serviceDesc.Streams[7], "/proto2.MessageDeliverer/OnNodeDetached", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageDelivererOnNodeDetachedClient{stream}
	return x, nil
}

type MessageDeliverer_OnNodeDetachedClient interface {
	Send(*Node) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type messageDelivererOnNodeDetachedClient struct {
	grpc.ClientStream
}

func (x *messageDelivererOnNodeDetachedClient) Send(m *Node) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageDelivererOnNodeDetachedClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageDelivererClient) OnObjectCreated(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_OnObjectCreatedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageDeliverer_serviceDesc.Streams[8], "/proto2.MessageDeliverer/OnObjectCreated", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageDelivererOnObjectCreatedClient{stream}
	return x, nil
}

type MessageDeliverer_OnObjectCreatedClient interface {
	Send(*ObjectInfo) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type messageDelivererOnObjectCreatedClient struct {
	grpc.ClientStream
}

func (x *messageDelivererOnObjectCreatedClient) Send(m *ObjectInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageDelivererOnObjectCreatedClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageDelivererClient) OnObjectDeleted(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_OnObjectDeletedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageDeliverer_serviceDesc.Streams[9], "/proto2.MessageDeliverer/OnObjectDeleted", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageDelivererOnObjectDeletedClient{stream}
	return x, nil
}

type MessageDeliverer_OnObjectDeletedClient interface {
	Send(*ObjectInfo) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type messageDelivererOnObjectDeletedClient struct {
	grpc.ClientStream
}

func (x *messageDelivererOnObjectDeletedClient) Send(m *ObjectInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageDelivererOnObjectDeletedClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageDelivererClient) OnObjectCacheCreated(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_OnObjectCacheCreatedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageDeliverer_serviceDesc.Streams[10], "/proto2.MessageDeliverer/OnObjectCacheCreated", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageDelivererOnObjectCacheCreatedClient{stream}
	return x, nil
}

type MessageDeliverer_OnObjectCacheCreatedClient interface {
	Send(*ObjectInfo) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type messageDelivererOnObjectCacheCreatedClient struct {
	grpc.ClientStream
}

func (x *messageDelivererOnObjectCacheCreatedClient) Send(m *ObjectInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageDelivererOnObjectCacheCreatedClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageDelivererClient) OnObjectCacheDeleted(ctx context.Context, opts ...grpc.CallOption) (MessageDeliverer_OnObjectCacheDeletedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageDeliverer_serviceDesc.Streams[11], "/proto2.MessageDeliverer/OnObjectCacheDeleted", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageDelivererOnObjectCacheDeletedClient{stream}
	return x, nil
}

type MessageDeliverer_OnObjectCacheDeletedClient interface {
	Send(*ObjectInfo) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type messageDelivererOnObjectCacheDeletedClient struct {
	grpc.ClientStream
}

func (x *messageDelivererOnObjectCacheDeletedClient) Send(m *ObjectInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageDelivererOnObjectCacheDeletedClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageDelivererServer is the server API for MessageDeliverer service.
type MessageDelivererServer interface {
	// 複数個のlistenとunlistenを一括でやる。
	Listen(MessageDeliverer_ListenServer) error
	Unlisten(MessageDeliverer_UnlistenServer) error
	OnListenChanged(MessageDeliverer_OnListenChangedServer) error
	OnNodeAdded(MessageDeliverer_OnNodeAddedServer) error
	OnNodeStopping(MessageDeliverer_OnNodeStoppingServer) error
	OnNodeStopped(MessageDeliverer_OnNodeStoppedServer) error
	OnNodeDetaching(MessageDeliverer_OnNodeDetachingServer) error
	OnNodeDetached(MessageDeliverer_OnNodeDetachedServer) error
	OnObjectCreated(MessageDeliverer_OnObjectCreatedServer) error
	OnObjectDeleted(MessageDeliverer_OnObjectDeletedServer) error
	OnObjectCacheCreated(MessageDeliverer_OnObjectCacheCreatedServer) error
	OnObjectCacheDeleted(MessageDeliverer_OnObjectCacheDeletedServer) error
}

func RegisterMessageDelivererServer(s *grpc.Server, srv MessageDelivererServer) {
	s.RegisterService(&_MessageDeliverer_serviceDesc, srv)
}

func _MessageDeliverer_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageDelivererServer).Listen(&messageDelivererListenServer{stream})
}

type MessageDeliverer_ListenServer interface {
	SendAndClose(*ListenResult) error
	Recv() (*EventListener, error)
	grpc.ServerStream
}

type messageDelivererListenServer struct {
	grpc.ServerStream
}

func (x *messageDelivererListenServer) SendAndClose(m *ListenResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageDelivererListenServer) Recv() (*EventListener, error) {
	m := new(EventListener)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageDeliverer_Unlisten_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageDelivererServer).Unlisten(&messageDelivererUnlistenServer{stream})
}

type MessageDeliverer_UnlistenServer interface {
	SendAndClose(*UnlistenResult) error
	Recv() (*EventListener, error)
	grpc.ServerStream
}

type messageDelivererUnlistenServer struct {
	grpc.ServerStream
}

func (x *messageDelivererUnlistenServer) SendAndClose(m *UnlistenResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageDelivererUnlistenServer) Recv() (*EventListener, error) {
	m := new(EventListener)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageDeliverer_OnListenChanged_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageDelivererServer).OnListenChanged(&messageDelivererOnListenChangedServer{stream})
}

type MessageDeliverer_OnListenChangedServer interface {
	SendAndClose(*Empty) error
	Recv() (*EventListener, error)
	grpc.ServerStream
}

type messageDelivererOnListenChangedServer struct {
	grpc.ServerStream
}

func (x *messageDelivererOnListenChangedServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageDelivererOnListenChangedServer) Recv() (*EventListener, error) {
	m := new(EventListener)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageDeliverer_OnNodeAdded_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageDelivererServer).OnNodeAdded(&messageDelivererOnNodeAddedServer{stream})
}

type MessageDeliverer_OnNodeAddedServer interface {
	SendAndClose(*Empty) error
	Recv() (*Node, error)
	grpc.ServerStream
}

type messageDelivererOnNodeAddedServer struct {
	grpc.ServerStream
}

func (x *messageDelivererOnNodeAddedServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageDelivererOnNodeAddedServer) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageDeliverer_OnNodeStopping_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageDelivererServer).OnNodeStopping(&messageDelivererOnNodeStoppingServer{stream})
}

type MessageDeliverer_OnNodeStoppingServer interface {
	SendAndClose(*Empty) error
	Recv() (*Node, error)
	grpc.ServerStream
}

type messageDelivererOnNodeStoppingServer struct {
	grpc.ServerStream
}

func (x *messageDelivererOnNodeStoppingServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageDelivererOnNodeStoppingServer) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageDeliverer_OnNodeStopped_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageDelivererServer).OnNodeStopped(&messageDelivererOnNodeStoppedServer{stream})
}

type MessageDeliverer_OnNodeStoppedServer interface {
	SendAndClose(*Empty) error
	Recv() (*Node, error)
	grpc.ServerStream
}

type messageDelivererOnNodeStoppedServer struct {
	grpc.ServerStream
}

func (x *messageDelivererOnNodeStoppedServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageDelivererOnNodeStoppedServer) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageDeliverer_OnNodeDetaching_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageDelivererServer).OnNodeDetaching(&messageDelivererOnNodeDetachingServer{stream})
}

type MessageDeliverer_OnNodeDetachingServer interface {
	SendAndClose(*Empty) error
	Recv() (*Node, error)
	grpc.ServerStream
}

type messageDelivererOnNodeDetachingServer struct {
	grpc.ServerStream
}

func (x *messageDelivererOnNodeDetachingServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageDelivererOnNodeDetachingServer) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageDeliverer_OnNodeDetached_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageDelivererServer).OnNodeDetached(&messageDelivererOnNodeDetachedServer{stream})
}

type MessageDeliverer_OnNodeDetachedServer interface {
	SendAndClose(*Empty) error
	Recv() (*Node, error)
	grpc.ServerStream
}

type messageDelivererOnNodeDetachedServer struct {
	grpc.ServerStream
}

func (x *messageDelivererOnNodeDetachedServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageDelivererOnNodeDetachedServer) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageDeliverer_OnObjectCreated_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageDelivererServer).OnObjectCreated(&messageDelivererOnObjectCreatedServer{stream})
}

type MessageDeliverer_OnObjectCreatedServer interface {
	SendAndClose(*Empty) error
	Recv() (*ObjectInfo, error)
	grpc.ServerStream
}

type messageDelivererOnObjectCreatedServer struct {
	grpc.ServerStream
}

func (x *messageDelivererOnObjectCreatedServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageDelivererOnObjectCreatedServer) Recv() (*ObjectInfo, error) {
	m := new(ObjectInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageDeliverer_OnObjectDeleted_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageDelivererServer).OnObjectDeleted(&messageDelivererOnObjectDeletedServer{stream})
}

type MessageDeliverer_OnObjectDeletedServer interface {
	SendAndClose(*Empty) error
	Recv() (*ObjectInfo, error)
	grpc.ServerStream
}

type messageDelivererOnObjectDeletedServer struct {
	grpc.ServerStream
}

func (x *messageDelivererOnObjectDeletedServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageDelivererOnObjectDeletedServer) Recv() (*ObjectInfo, error) {
	m := new(ObjectInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageDeliverer_OnObjectCacheCreated_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageDelivererServer).OnObjectCacheCreated(&messageDelivererOnObjectCacheCreatedServer{stream})
}

type MessageDeliverer_OnObjectCacheCreatedServer interface {
	SendAndClose(*Empty) error
	Recv() (*ObjectInfo, error)
	grpc.ServerStream
}

type messageDelivererOnObjectCacheCreatedServer struct {
	grpc.ServerStream
}

func (x *messageDelivererOnObjectCacheCreatedServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageDelivererOnObjectCacheCreatedServer) Recv() (*ObjectInfo, error) {
	m := new(ObjectInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageDeliverer_OnObjectCacheDeleted_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageDelivererServer).OnObjectCacheDeleted(&messageDelivererOnObjectCacheDeletedServer{stream})
}

type MessageDeliverer_OnObjectCacheDeletedServer interface {
	SendAndClose(*Empty) error
	Recv() (*ObjectInfo, error)
	grpc.ServerStream
}

type messageDelivererOnObjectCacheDeletedServer struct {
	grpc.ServerStream
}

func (x *messageDelivererOnObjectCacheDeletedServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageDelivererOnObjectCacheDeletedServer) Recv() (*ObjectInfo, error) {
	m := new(ObjectInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MessageDeliverer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto2.MessageDeliverer",
	HandlerType: (*MessageDelivererServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _MessageDeliverer_Listen_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Unlisten",
			Handler:       _MessageDeliverer_Unlisten_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "OnListenChanged",
			Handler:       _MessageDeliverer_OnListenChanged_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "OnNodeAdded",
			Handler:       _MessageDeliverer_OnNodeAdded_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "OnNodeStopping",
			Handler:       _MessageDeliverer_OnNodeStopping_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "OnNodeStopped",
			Handler:       _MessageDeliverer_OnNodeStopped_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "OnNodeDetaching",
			Handler:       _MessageDeliverer_OnNodeDetaching_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "OnNodeDetached",
			Handler:       _MessageDeliverer_OnNodeDetached_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "OnObjectCreated",
			Handler:       _MessageDeliverer_OnObjectCreated_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "OnObjectDeleted",
			Handler:       _MessageDeliverer_OnObjectDeleted_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "OnObjectCacheCreated",
			Handler:       _MessageDeliverer_OnObjectCacheCreated_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "OnObjectCacheDeleted",
			Handler:       _MessageDeliverer_OnObjectCacheDeleted_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

// ControllerServiceClient is the client API for ControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerServiceClient interface {
	StopSystem(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	AddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error)
	StopNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error)
	DetachNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error)
}

type controllerServiceClient struct {
	cc *grpc.ClientConn
}

func NewControllerServiceClient(cc *grpc.ClientConn) ControllerServiceClient {
	return &controllerServiceClient{cc}
}

func (c *controllerServiceClient) StopSystem(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.ControllerService/StopSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) AddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.ControllerService/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) StopNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.ControllerService/StopNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) DetachNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.ControllerService/DetachNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServiceServer is the server API for ControllerService service.
type ControllerServiceServer interface {
	StopSystem(context.Context, *Empty) (*Empty, error)
	AddNode(context.Context, *Node) (*Empty, error)
	StopNode(context.Context, *Node) (*Empty, error)
	DetachNode(context.Context, *Node) (*Empty, error)
}

func RegisterControllerServiceServer(s *grpc.Server, srv ControllerServiceServer) {
	s.RegisterService(&_ControllerService_serviceDesc, srv)
}

func _ControllerService_StopSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).StopSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.ControllerService/StopSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).StopSystem(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.ControllerService/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).AddNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_StopNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).StopNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.ControllerService/StopNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).StopNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_DetachNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).DetachNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.ControllerService/DetachNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).DetachNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControllerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto2.ControllerService",
	HandlerType: (*ControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StopSystem",
			Handler:    _ControllerService_StopSystem_Handler,
		},
		{
			MethodName: "AddNode",
			Handler:    _ControllerService_AddNode_Handler,
		},
		{
			MethodName: "StopNode",
			Handler:    _ControllerService_StopNode_Handler,
		},
		{
			MethodName: "DetachNode",
			Handler:    _ControllerService_DetachNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// StorageServiceClient is the client API for StorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StorageServiceClient interface {
	CreateObject(ctx context.Context, opts ...grpc.CallOption) (StorageService_CreateObjectClient, error)
	DeleteObject(ctx context.Context, opts ...grpc.CallOption) (StorageService_DeleteObjectClient, error)
}

type storageServiceClient struct {
	cc *grpc.ClientConn
}

func NewStorageServiceClient(cc *grpc.ClientConn) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) CreateObject(ctx context.Context, opts ...grpc.CallOption) (StorageService_CreateObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StorageService_serviceDesc.Streams[0], "/proto2.StorageService/CreateObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceCreateObjectClient{stream}
	return x, nil
}

type StorageService_CreateObjectClient interface {
	Send(*Object) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type storageServiceCreateObjectClient struct {
	grpc.ClientStream
}

func (x *storageServiceCreateObjectClient) Send(m *Object) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageServiceCreateObjectClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageServiceClient) DeleteObject(ctx context.Context, opts ...grpc.CallOption) (StorageService_DeleteObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StorageService_serviceDesc.Streams[1], "/proto2.StorageService/DeleteObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceDeleteObjectClient{stream}
	return x, nil
}

type StorageService_DeleteObjectClient interface {
	Send(*ObjectInfo) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type storageServiceDeleteObjectClient struct {
	grpc.ClientStream
}

func (x *storageServiceDeleteObjectClient) Send(m *ObjectInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageServiceDeleteObjectClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StorageServiceServer is the server API for StorageService service.
type StorageServiceServer interface {
	CreateObject(StorageService_CreateObjectServer) error
	DeleteObject(StorageService_DeleteObjectServer) error
}

func RegisterStorageServiceServer(s *grpc.Server, srv StorageServiceServer) {
	s.RegisterService(&_StorageService_serviceDesc, srv)
}

func _StorageService_CreateObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServiceServer).CreateObject(&storageServiceCreateObjectServer{stream})
}

type StorageService_CreateObjectServer interface {
	SendAndClose(*Empty) error
	Recv() (*Object, error)
	grpc.ServerStream
}

type storageServiceCreateObjectServer struct {
	grpc.ServerStream
}

func (x *storageServiceCreateObjectServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageServiceCreateObjectServer) Recv() (*Object, error) {
	m := new(Object)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StorageService_DeleteObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServiceServer).DeleteObject(&storageServiceDeleteObjectServer{stream})
}

type StorageService_DeleteObjectServer interface {
	SendAndClose(*Empty) error
	Recv() (*ObjectInfo, error)
	grpc.ServerStream
}

type storageServiceDeleteObjectServer struct {
	grpc.ServerStream
}

func (x *storageServiceDeleteObjectServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageServiceDeleteObjectServer) Recv() (*ObjectInfo, error) {
	m := new(ObjectInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StorageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto2.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateObject",
			Handler:       _StorageService_CreateObject_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteObject",
			Handler:       _StorageService_DeleteObject_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

// LocalStorageServiceClient is the client API for LocalStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LocalStorageServiceClient interface {
	CreateObjectByPath(ctx context.Context, opts ...grpc.CallOption) (LocalStorageService_CreateObjectByPathClient, error)
	DownloadObject(ctx context.Context, opts ...grpc.CallOption) (LocalStorageService_DownloadObjectClient, error)
	RLockObject(ctx context.Context, opts ...grpc.CallOption) (LocalStorageService_RLockObjectClient, error)
	RUnlockObject(ctx context.Context, opts ...grpc.CallOption) (LocalStorageService_RUnlockObjectClient, error)
}

type localStorageServiceClient struct {
	cc *grpc.ClientConn
}

func NewLocalStorageServiceClient(cc *grpc.ClientConn) LocalStorageServiceClient {
	return &localStorageServiceClient{cc}
}

func (c *localStorageServiceClient) CreateObjectByPath(ctx context.Context, opts ...grpc.CallOption) (LocalStorageService_CreateObjectByPathClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalStorageService_serviceDesc.Streams[0], "/proto2.LocalStorageService/CreateObjectByPath", opts...)
	if err != nil {
		return nil, err
	}
	x := &localStorageServiceCreateObjectByPathClient{stream}
	return x, nil
}

type LocalStorageService_CreateObjectByPathClient interface {
	Send(*ObjectPath) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type localStorageServiceCreateObjectByPathClient struct {
	grpc.ClientStream
}

func (x *localStorageServiceCreateObjectByPathClient) Send(m *ObjectPath) error {
	return x.ClientStream.SendMsg(m)
}

func (x *localStorageServiceCreateObjectByPathClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localStorageServiceClient) DownloadObject(ctx context.Context, opts ...grpc.CallOption) (LocalStorageService_DownloadObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalStorageService_serviceDesc.Streams[1], "/proto2.LocalStorageService/DownloadObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &localStorageServiceDownloadObjectClient{stream}
	return x, nil
}

type LocalStorageService_DownloadObjectClient interface {
	Send(*ObjectInfo) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type localStorageServiceDownloadObjectClient struct {
	grpc.ClientStream
}

func (x *localStorageServiceDownloadObjectClient) Send(m *ObjectInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *localStorageServiceDownloadObjectClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localStorageServiceClient) RLockObject(ctx context.Context, opts ...grpc.CallOption) (LocalStorageService_RLockObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalStorageService_serviceDesc.Streams[2], "/proto2.LocalStorageService/RLockObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &localStorageServiceRLockObjectClient{stream}
	return x, nil
}

type LocalStorageService_RLockObjectClient interface {
	Send(*ObjectInfo) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type localStorageServiceRLockObjectClient struct {
	grpc.ClientStream
}

func (x *localStorageServiceRLockObjectClient) Send(m *ObjectInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *localStorageServiceRLockObjectClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localStorageServiceClient) RUnlockObject(ctx context.Context, opts ...grpc.CallOption) (LocalStorageService_RUnlockObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalStorageService_serviceDesc.Streams[3], "/proto2.LocalStorageService/RUnlockObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &localStorageServiceRUnlockObjectClient{stream}
	return x, nil
}

type LocalStorageService_RUnlockObjectClient interface {
	Send(*ObjectInfo) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type localStorageServiceRUnlockObjectClient struct {
	grpc.ClientStream
}

func (x *localStorageServiceRUnlockObjectClient) Send(m *ObjectInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *localStorageServiceRUnlockObjectClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LocalStorageServiceServer is the server API for LocalStorageService service.
type LocalStorageServiceServer interface {
	CreateObjectByPath(LocalStorageService_CreateObjectByPathServer) error
	DownloadObject(LocalStorageService_DownloadObjectServer) error
	RLockObject(LocalStorageService_RLockObjectServer) error
	RUnlockObject(LocalStorageService_RUnlockObjectServer) error
}

func RegisterLocalStorageServiceServer(s *grpc.Server, srv LocalStorageServiceServer) {
	s.RegisterService(&_LocalStorageService_serviceDesc, srv)
}

func _LocalStorageService_CreateObjectByPath_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocalStorageServiceServer).CreateObjectByPath(&localStorageServiceCreateObjectByPathServer{stream})
}

type LocalStorageService_CreateObjectByPathServer interface {
	SendAndClose(*Empty) error
	Recv() (*ObjectPath, error)
	grpc.ServerStream
}

type localStorageServiceCreateObjectByPathServer struct {
	grpc.ServerStream
}

func (x *localStorageServiceCreateObjectByPathServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *localStorageServiceCreateObjectByPathServer) Recv() (*ObjectPath, error) {
	m := new(ObjectPath)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LocalStorageService_DownloadObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocalStorageServiceServer).DownloadObject(&localStorageServiceDownloadObjectServer{stream})
}

type LocalStorageService_DownloadObjectServer interface {
	SendAndClose(*Empty) error
	Recv() (*ObjectInfo, error)
	grpc.ServerStream
}

type localStorageServiceDownloadObjectServer struct {
	grpc.ServerStream
}

func (x *localStorageServiceDownloadObjectServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *localStorageServiceDownloadObjectServer) Recv() (*ObjectInfo, error) {
	m := new(ObjectInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LocalStorageService_RLockObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocalStorageServiceServer).RLockObject(&localStorageServiceRLockObjectServer{stream})
}

type LocalStorageService_RLockObjectServer interface {
	SendAndClose(*Empty) error
	Recv() (*ObjectInfo, error)
	grpc.ServerStream
}

type localStorageServiceRLockObjectServer struct {
	grpc.ServerStream
}

func (x *localStorageServiceRLockObjectServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *localStorageServiceRLockObjectServer) Recv() (*ObjectInfo, error) {
	m := new(ObjectInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LocalStorageService_RUnlockObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocalStorageServiceServer).RUnlockObject(&localStorageServiceRUnlockObjectServer{stream})
}

type LocalStorageService_RUnlockObjectServer interface {
	SendAndClose(*Empty) error
	Recv() (*ObjectInfo, error)
	grpc.ServerStream
}

type localStorageServiceRUnlockObjectServer struct {
	grpc.ServerStream
}

func (x *localStorageServiceRUnlockObjectServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *localStorageServiceRUnlockObjectServer) Recv() (*ObjectInfo, error) {
	m := new(ObjectInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _LocalStorageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto2.LocalStorageService",
	HandlerType: (*LocalStorageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateObjectByPath",
			Handler:       _LocalStorageService_CreateObjectByPath_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadObject",
			Handler:       _LocalStorageService_DownloadObject_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RLockObject",
			Handler:       _LocalStorageService_RLockObject_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RUnlockObject",
			Handler:       _LocalStorageService_RUnlockObject_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

// InternalStorageServiceClient is the client API for InternalStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InternalStorageServiceClient interface {
	// TODO
	GetObject(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (*Object, error)
	PutObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Empty, error)
}

type internalStorageServiceClient struct {
	cc *grpc.ClientConn
}

func NewInternalStorageServiceClient(cc *grpc.ClientConn) InternalStorageServiceClient {
	return &internalStorageServiceClient{cc}
}

func (c *internalStorageServiceClient) GetObject(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := c.cc.Invoke(ctx, "/proto2.InternalStorageService/GetObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalStorageServiceClient) PutObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto2.InternalStorageService/PutObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalStorageServiceServer is the server API for InternalStorageService service.
type InternalStorageServiceServer interface {
	// TODO
	GetObject(context.Context, *ObjectInfo) (*Object, error)
	PutObject(context.Context, *Object) (*Empty, error)
}

func RegisterInternalStorageServiceServer(s *grpc.Server, srv InternalStorageServiceServer) {
	s.RegisterService(&_InternalStorageService_serviceDesc, srv)
}

func _InternalStorageService_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalStorageServiceServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.InternalStorageService/GetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalStorageServiceServer).GetObject(ctx, req.(*ObjectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalStorageService_PutObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalStorageServiceServer).PutObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto2.InternalStorageService/PutObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalStorageServiceServer).PutObject(ctx, req.(*Object))
	}
	return interceptor(ctx, in, info, handler)
}

var _InternalStorageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto2.InternalStorageService",
	HandlerType: (*InternalStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetObject",
			Handler:    _InternalStorageService_GetObject_Handler,
		},
		{
			MethodName: "PutObject",
			Handler:    _InternalStorageService_PutObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
