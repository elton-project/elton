// Code generated by protoc-gen-go. DO NOT EDIT.
// source: elton_service.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ObjectInfo struct {
	ObjectId             string   `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Version              uint64   `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Delegate             string   `protobuf:"bytes,3,opt,name=delegate,proto3" json:"delegate,omitempty"`
	RequestHostname      string   `protobuf:"bytes,4,opt,name=request_hostname,json=requestHostname,proto3" json:"request_hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObjectInfo) Reset()         { *m = ObjectInfo{} }
func (m *ObjectInfo) String() string { return proto.CompactTextString(m) }
func (*ObjectInfo) ProtoMessage()    {}
func (*ObjectInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f2c3234e660141f, []int{0}
}

func (m *ObjectInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectInfo.Unmarshal(m, b)
}
func (m *ObjectInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectInfo.Marshal(b, m, deterministic)
}
func (m *ObjectInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectInfo.Merge(m, src)
}
func (m *ObjectInfo) XXX_Size() int {
	return xxx_messageInfo_ObjectInfo.Size(m)
}
func (m *ObjectInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectInfo proto.InternalMessageInfo

func (m *ObjectInfo) GetObjectId() string {
	if m != nil {
		return m.ObjectId
	}
	return ""
}

func (m *ObjectInfo) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ObjectInfo) GetDelegate() string {
	if m != nil {
		return m.Delegate
	}
	return ""
}

func (m *ObjectInfo) GetRequestHostname() string {
	if m != nil {
		return m.RequestHostname
	}
	return ""
}

type Object struct {
	ObjectId             string   `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Version              uint64   `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Body                 []byte   `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Object) Reset()         { *m = Object{} }
func (m *Object) String() string { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()    {}
func (*Object) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f2c3234e660141f, []int{1}
}

func (m *Object) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Object.Unmarshal(m, b)
}
func (m *Object) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Object.Marshal(b, m, deterministic)
}
func (m *Object) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Object.Merge(m, src)
}
func (m *Object) XXX_Size() int {
	return xxx_messageInfo_Object.Size(m)
}
func (m *Object) XXX_DiscardUnknown() {
	xxx_messageInfo_Object.DiscardUnknown(m)
}

var xxx_messageInfo_Object proto.InternalMessageInfo

func (m *Object) GetObjectId() string {
	if m != nil {
		return m.ObjectId
	}
	return ""
}

func (m *Object) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Object) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type EmptyMessage struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyMessage) Reset()         { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()    {}
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f2c3234e660141f, []int{2}
}

func (m *EmptyMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyMessage.Unmarshal(m, b)
}
func (m *EmptyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyMessage.Marshal(b, m, deterministic)
}
func (m *EmptyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyMessage.Merge(m, src)
}
func (m *EmptyMessage) XXX_Size() int {
	return xxx_messageInfo_EmptyMessage.Size(m)
}
func (m *EmptyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyMessage proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ObjectInfo)(nil), "proto.ObjectInfo")
	proto.RegisterType((*Object)(nil), "proto.Object")
	proto.RegisterType((*EmptyMessage)(nil), "proto.EmptyMessage")
}

func init() { proto.RegisterFile("elton_service.proto", fileDescriptor_9f2c3234e660141f) }

var fileDescriptor_9f2c3234e660141f = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xcd, 0x4e, 0xc2, 0x40,
	0x14, 0x85, 0x29, 0x22, 0xd2, 0x9b, 0xaa, 0x78, 0xd9, 0x34, 0x75, 0x43, 0x66, 0x85, 0x1b, 0xe2,
	0xcf, 0xc6, 0x85, 0x71, 0xa3, 0x04, 0x59, 0x18, 0x4d, 0x79, 0x80, 0xa6, 0xa5, 0x57, 0xac, 0x69,
	0x67, 0x70, 0x66, 0x20, 0xe1, 0x15, 0x7c, 0x16, 0x1f, 0xd2, 0x38, 0xd3, 0x89, 0x10, 0x5d, 0x18,
	0x56, 0xed, 0xf9, 0xda, 0x2f, 0x39, 0xf7, 0x40, 0x8f, 0x4a, 0x2d, 0x78, 0xa2, 0x48, 0xae, 0x8a,
	0x19, 0x0d, 0x17, 0x52, 0x68, 0x81, 0xfb, 0xe6, 0xc1, 0x3e, 0x3c, 0x80, 0xa7, 0xec, 0x8d, 0x66,
	0x7a, 0xc2, 0x5f, 0x04, 0x9e, 0x82, 0x2f, 0x4c, 0x4a, 0x8a, 0x3c, 0xf4, 0xfa, 0xde, 0xc0, 0x8f,
	0x3b, 0x16, 0x4c, 0x72, 0x0c, 0xe1, 0x60, 0x45, 0x52, 0x15, 0x82, 0x87, 0xcd, 0xbe, 0x37, 0x68,
	0xc5, 0x2e, 0x62, 0x04, 0x9d, 0x9c, 0x4a, 0x9a, 0xa7, 0x9a, 0xc2, 0x3d, 0x6b, 0xb9, 0x8c, 0x67,
	0xd0, 0x95, 0xf4, 0xbe, 0x24, 0xa5, 0x93, 0x57, 0xa1, 0x34, 0x4f, 0x2b, 0x0a, 0x5b, 0xe6, 0x9f,
	0xe3, 0x9a, 0x3f, 0xd4, 0x98, 0x4d, 0xa1, 0x6d, 0xbb, 0xec, 0xda, 0x03, 0xa1, 0x95, 0x89, 0x7c,
	0x6d, 0x3a, 0x04, 0xb1, 0x79, 0x67, 0x47, 0x10, 0x8c, 0xaa, 0x85, 0x5e, 0x3f, 0x92, 0x52, 0xe9,
	0x9c, 0x2e, 0x3f, 0x9b, 0x10, 0x8c, 0xbe, 0x07, 0x99, 0xda, 0x3d, 0xf0, 0x16, 0x70, 0x4c, 0x9c,
	0x64, 0xaa, 0x69, 0x63, 0x89, 0x13, 0xbb, 0xd3, 0xf0, 0x07, 0x45, 0xbf, 0x11, 0x6b, 0x9c, 0x7b,
	0x78, 0x03, 0xdd, 0x3b, 0x51, 0x55, 0x85, 0xde, 0xc9, 0xbe, 0x00, 0x7f, 0x4c, 0xb5, 0xfa, 0x97,
	0x76, 0xb8, 0x85, 0x9c, 0xf2, 0xbc, 0x74, 0xca, 0xf6, 0xf7, 0xa8, 0x57, 0xc7, 0xcd, 0x93, 0x59,
	0x03, 0xaf, 0x21, 0xb8, 0xa7, 0x92, 0xdc, 0x85, 0xff, 0xef, 0x97, 0xb5, 0x0d, 0xbd, 0xfa, 0x0a,
	0x00, 0x00, 0xff, 0xff, 0xff, 0x47, 0x54, 0x1f, 0x45, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EltonServiceClient is the client API for EltonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EltonServiceClient interface {
	GenerateObjectInfo(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (EltonService_GenerateObjectInfoClient, error)
	CommitObjectInfo(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (EltonService_CommitObjectInfoClient, error)
	GetObject(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (EltonService_GetObjectClient, error)
	PutObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*EmptyMessage, error)
	DeleteObject(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (EltonService_DeleteObjectClient, error)
}

type eltonServiceClient struct {
	cc *grpc.ClientConn
}

func NewEltonServiceClient(cc *grpc.ClientConn) EltonServiceClient {
	return &eltonServiceClient{cc}
}

func (c *eltonServiceClient) GenerateObjectInfo(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (EltonService_GenerateObjectInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EltonService_serviceDesc.Streams[0], "/proto.EltonService/GenerateObjectInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &eltonServiceGenerateObjectInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EltonService_GenerateObjectInfoClient interface {
	Recv() (*ObjectInfo, error)
	grpc.ClientStream
}

type eltonServiceGenerateObjectInfoClient struct {
	grpc.ClientStream
}

func (x *eltonServiceGenerateObjectInfoClient) Recv() (*ObjectInfo, error) {
	m := new(ObjectInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eltonServiceClient) CommitObjectInfo(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (EltonService_CommitObjectInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EltonService_serviceDesc.Streams[1], "/proto.EltonService/CommitObjectInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &eltonServiceCommitObjectInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EltonService_CommitObjectInfoClient interface {
	Recv() (*ObjectInfo, error)
	grpc.ClientStream
}

type eltonServiceCommitObjectInfoClient struct {
	grpc.ClientStream
}

func (x *eltonServiceCommitObjectInfoClient) Recv() (*ObjectInfo, error) {
	m := new(ObjectInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eltonServiceClient) GetObject(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (EltonService_GetObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EltonService_serviceDesc.Streams[2], "/proto.EltonService/GetObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &eltonServiceGetObjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EltonService_GetObjectClient interface {
	Recv() (*Object, error)
	grpc.ClientStream
}

type eltonServiceGetObjectClient struct {
	grpc.ClientStream
}

func (x *eltonServiceGetObjectClient) Recv() (*Object, error) {
	m := new(Object)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eltonServiceClient) PutObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/proto.EltonService/PutObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eltonServiceClient) DeleteObject(ctx context.Context, in *ObjectInfo, opts ...grpc.CallOption) (EltonService_DeleteObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EltonService_serviceDesc.Streams[3], "/proto.EltonService/DeleteObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &eltonServiceDeleteObjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EltonService_DeleteObjectClient interface {
	Recv() (*ObjectInfo, error)
	grpc.ClientStream
}

type eltonServiceDeleteObjectClient struct {
	grpc.ClientStream
}

func (x *eltonServiceDeleteObjectClient) Recv() (*ObjectInfo, error) {
	m := new(ObjectInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EltonServiceServer is the server API for EltonService service.
type EltonServiceServer interface {
	GenerateObjectInfo(*ObjectInfo, EltonService_GenerateObjectInfoServer) error
	CommitObjectInfo(*ObjectInfo, EltonService_CommitObjectInfoServer) error
	GetObject(*ObjectInfo, EltonService_GetObjectServer) error
	PutObject(context.Context, *Object) (*EmptyMessage, error)
	DeleteObject(*ObjectInfo, EltonService_DeleteObjectServer) error
}

func RegisterEltonServiceServer(s *grpc.Server, srv EltonServiceServer) {
	s.RegisterService(&_EltonService_serviceDesc, srv)
}

func _EltonService_GenerateObjectInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObjectInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EltonServiceServer).GenerateObjectInfo(m, &eltonServiceGenerateObjectInfoServer{stream})
}

type EltonService_GenerateObjectInfoServer interface {
	Send(*ObjectInfo) error
	grpc.ServerStream
}

type eltonServiceGenerateObjectInfoServer struct {
	grpc.ServerStream
}

func (x *eltonServiceGenerateObjectInfoServer) Send(m *ObjectInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _EltonService_CommitObjectInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObjectInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EltonServiceServer).CommitObjectInfo(m, &eltonServiceCommitObjectInfoServer{stream})
}

type EltonService_CommitObjectInfoServer interface {
	Send(*ObjectInfo) error
	grpc.ServerStream
}

type eltonServiceCommitObjectInfoServer struct {
	grpc.ServerStream
}

func (x *eltonServiceCommitObjectInfoServer) Send(m *ObjectInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _EltonService_GetObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObjectInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EltonServiceServer).GetObject(m, &eltonServiceGetObjectServer{stream})
}

type EltonService_GetObjectServer interface {
	Send(*Object) error
	grpc.ServerStream
}

type eltonServiceGetObjectServer struct {
	grpc.ServerStream
}

func (x *eltonServiceGetObjectServer) Send(m *Object) error {
	return x.ServerStream.SendMsg(m)
}

func _EltonService_PutObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EltonServiceServer).PutObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EltonService/PutObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EltonServiceServer).PutObject(ctx, req.(*Object))
	}
	return interceptor(ctx, in, info, handler)
}

func _EltonService_DeleteObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObjectInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EltonServiceServer).DeleteObject(m, &eltonServiceDeleteObjectServer{stream})
}

type EltonService_DeleteObjectServer interface {
	Send(*ObjectInfo) error
	grpc.ServerStream
}

type eltonServiceDeleteObjectServer struct {
	grpc.ServerStream
}

func (x *eltonServiceDeleteObjectServer) Send(m *ObjectInfo) error {
	return x.ServerStream.SendMsg(m)
}

var _EltonService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EltonService",
	HandlerType: (*EltonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutObject",
			Handler:    _EltonService_PutObject_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateObjectInfo",
			Handler:       _EltonService_GenerateObjectInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CommitObjectInfo",
			Handler:       _EltonService_CommitObjectInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetObject",
			Handler:       _EltonService_GetObject_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteObject",
			Handler:       _EltonService_DeleteObject_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "elton_service.proto",
}
