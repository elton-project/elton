// Code generated by protoc-gen-grpc-gateway
// source: elton_service.proto
// DO NOT EDIT!

/*
Package proto is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package proto

import (
	"encoding/json"
	"io"
	"net/http"

	"github.com/gengo/grpc-gateway/internal"
	"github.com/gengo/grpc-gateway/runtime"
	"github.com/golang/glog"
	proto_0 "github.com/golang/protobuf/proto"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
)

var _ codes.Code
var _ io.Reader
var _ = runtime.String
var _ = json.Marshal
var _ = internal.PascalFromSnake

func request_EltonService_GenerateObjectID_0(ctx context.Context, client EltonServiceClient, req *http.Request, pathParams map[string]string) (EltonService_GenerateObjectIDClient, error) {
	var protoReq ObjectName

	if err = json.NewDecoder(req.Body).Decode(&protoReq); err != nil {
		return nil, grpc.Errorf(codes.InvalidArgument, "%v", err)
	}

	return client.GenerateObjectID(ctx, &protoReq)
}

// RegisterEltonServiceHandlerFromEndpoint is same as RegisterEltonServiceHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterEltonServiceHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string) (err error) {
	conn, err := grpc.Dial(endpoint)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				glog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				glog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterEltonServiceHandler(ctx, mux, conn)
}

// RegisterEltonServiceHandler registers the http handlers for service EltonService to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterEltonServiceHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	client := NewEltonServiceClient(conn)

	mux.Handle("POST", pattern_EltonService_GenerateObjectID_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		resp, err := request_EltonService_GenerateObjectID_0(runtime.AnnotateContext(ctx, req), client, req, pathParams)
		if err != nil {
			runtime.HTTPError(w, err)
			return
		}

		runtime.ForwardResponseStream(w, func() (proto.Message, error) { return resp.Recv() })

	})

	return nil
}

var (
	pattern_EltonService_GenerateObjectID_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1}, []string{"api", "objectid"}, ""))
)
